// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage-manager.proto

#include "storage-manager.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace StorageEngineInstance {
PROTOBUF_CONSTEXPR LBA2PBARequest_SstCsdMapEntry_DoNotUse::LBA2PBARequest_SstCsdMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct LBA2PBARequest_SstCsdMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LBA2PBARequest_SstCsdMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LBA2PBARequest_SstCsdMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LBA2PBARequest_SstCsdMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LBA2PBARequest_SstCsdMapEntry_DoNotUseDefaultTypeInternal _LBA2PBARequest_SstCsdMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR LBA2PBARequest::LBA2PBARequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sst_csd_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.table_index_number_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LBA2PBARequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LBA2PBARequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LBA2PBARequestDefaultTypeInternal() {}
  union {
    LBA2PBARequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LBA2PBARequestDefaultTypeInternal _LBA2PBARequest_default_instance_;
PROTOBUF_CONSTEXPR LBA2PBAResponse_Chunk::LBA2PBAResponse_Chunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.offset_)*/int64_t{0}
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LBA2PBAResponse_ChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LBA2PBAResponse_ChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LBA2PBAResponse_ChunkDefaultTypeInternal() {}
  union {
    LBA2PBAResponse_Chunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LBA2PBAResponse_ChunkDefaultTypeInternal _LBA2PBAResponse_Chunk_default_instance_;
PROTOBUF_CONSTEXPR LBA2PBAResponse_PBA::LBA2PBAResponse_PBA(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chunks_)*/{}
  , /*decltype(_impl_.csd_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LBA2PBAResponse_PBADefaultTypeInternal {
  PROTOBUF_CONSTEXPR LBA2PBAResponse_PBADefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LBA2PBAResponse_PBADefaultTypeInternal() {}
  union {
    LBA2PBAResponse_PBA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LBA2PBAResponse_PBADefaultTypeInternal _LBA2PBAResponse_PBA_default_instance_;
PROTOBUF_CONSTEXPR LBA2PBAResponse_SstPbaMapEntry_DoNotUse::LBA2PBAResponse_SstPbaMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct LBA2PBAResponse_SstPbaMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LBA2PBAResponse_SstPbaMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LBA2PBAResponse_SstPbaMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LBA2PBAResponse_SstPbaMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LBA2PBAResponse_SstPbaMapEntry_DoNotUseDefaultTypeInternal _LBA2PBAResponse_SstPbaMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR LBA2PBAResponse::LBA2PBAResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sst_pba_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LBA2PBAResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LBA2PBAResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LBA2PBAResponseDefaultTypeInternal() {}
  union {
    LBA2PBAResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LBA2PBAResponseDefaultTypeInternal _LBA2PBAResponse_default_instance_;
PROTOBUF_CONSTEXPR SSTList::SSTList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sst_list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SSTListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSTListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSTListDefaultTypeInternal() {}
  union {
    SSTList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSTListDefaultTypeInternal _SSTList_default_instance_;
PROTOBUF_CONSTEXPR DataFileInfo_CSD::DataFileInfo_CSD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.csd_id_)*/{}
  , /*decltype(_impl_.is_primary_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataFileInfo_CSDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataFileInfo_CSDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataFileInfo_CSDDefaultTypeInternal() {}
  union {
    DataFileInfo_CSD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataFileInfo_CSDDefaultTypeInternal _DataFileInfo_CSD_default_instance_;
PROTOBUF_CONSTEXPR DataFileInfo_SstCsdMapEntry_DoNotUse::DataFileInfo_SstCsdMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct DataFileInfo_SstCsdMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataFileInfo_SstCsdMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataFileInfo_SstCsdMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DataFileInfo_SstCsdMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataFileInfo_SstCsdMapEntry_DoNotUseDefaultTypeInternal _DataFileInfo_SstCsdMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR DataFileInfo::DataFileInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sst_csd_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataFileInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataFileInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataFileInfoDefaultTypeInternal() {}
  union {
    DataFileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataFileInfoDefaultTypeInternal _DataFileInfo_default_instance_;
}  // namespace StorageEngineInstance
static ::_pb::Metadata file_level_metadata_storage_2dmanager_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_storage_2dmanager_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_storage_2dmanager_2eproto = nullptr;

const uint32_t TableStruct_storage_2dmanager_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBARequest_SstCsdMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBARequest_SstCsdMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBARequest_SstCsdMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBARequest_SstCsdMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBARequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBARequest, _impl_.table_index_number_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBARequest, _impl_.sst_csd_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse_Chunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse_Chunk, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse_Chunk, _impl_.length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse_PBA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse_PBA, _impl_.csd_id_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse_PBA, _impl_.chunks_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse_SstPbaMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse_SstPbaMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse_SstPbaMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse_SstPbaMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::LBA2PBAResponse, _impl_.sst_pba_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SSTList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::SSTList, _impl_.sst_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DataFileInfo_CSD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DataFileInfo_CSD, _impl_.csd_id_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DataFileInfo_CSD, _impl_.is_primary_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DataFileInfo_SstCsdMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DataFileInfo_SstCsdMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DataFileInfo_SstCsdMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DataFileInfo_SstCsdMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DataFileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StorageEngineInstance::DataFileInfo, _impl_.sst_csd_map_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::StorageEngineInstance::LBA2PBARequest_SstCsdMapEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::StorageEngineInstance::LBA2PBARequest)},
  { 18, -1, -1, sizeof(::StorageEngineInstance::LBA2PBAResponse_Chunk)},
  { 26, -1, -1, sizeof(::StorageEngineInstance::LBA2PBAResponse_PBA)},
  { 34, 42, -1, sizeof(::StorageEngineInstance::LBA2PBAResponse_SstPbaMapEntry_DoNotUse)},
  { 44, -1, -1, sizeof(::StorageEngineInstance::LBA2PBAResponse)},
  { 51, -1, -1, sizeof(::StorageEngineInstance::SSTList)},
  { 58, -1, -1, sizeof(::StorageEngineInstance::DataFileInfo_CSD)},
  { 66, 74, -1, sizeof(::StorageEngineInstance::DataFileInfo_SstCsdMapEntry_DoNotUse)},
  { 76, -1, -1, sizeof(::StorageEngineInstance::DataFileInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::StorageEngineInstance::_LBA2PBARequest_SstCsdMapEntry_DoNotUse_default_instance_._instance,
  &::StorageEngineInstance::_LBA2PBARequest_default_instance_._instance,
  &::StorageEngineInstance::_LBA2PBAResponse_Chunk_default_instance_._instance,
  &::StorageEngineInstance::_LBA2PBAResponse_PBA_default_instance_._instance,
  &::StorageEngineInstance::_LBA2PBAResponse_SstPbaMapEntry_DoNotUse_default_instance_._instance,
  &::StorageEngineInstance::_LBA2PBAResponse_default_instance_._instance,
  &::StorageEngineInstance::_SSTList_default_instance_._instance,
  &::StorageEngineInstance::_DataFileInfo_CSD_default_instance_._instance,
  &::StorageEngineInstance::_DataFileInfo_SstCsdMapEntry_DoNotUse_default_instance_._instance,
  &::StorageEngineInstance::_DataFileInfo_default_instance_._instance,
};

const char descriptor_table_protodef_storage_2dmanager_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025storage-manager.proto\022\025StorageEngineIn"
  "stance\"\251\001\n\016LBA2PBARequest\022\032\n\022table_index"
  "_number\030\001 \001(\005\022I\n\013sst_csd_map\030\002 \003(\01324.Sto"
  "rageEngineInstance.LBA2PBARequest.SstCsd"
  "MapEntry\0320\n\016SstCsdMapEntry\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\t:\0028\001\"\271\002\n\017LBA2PBAResponse\022J"
  "\n\013sst_pba_map\030\001 \003(\01325.StorageEngineInsta"
  "nce.LBA2PBAResponse.SstPbaMapEntry\032\'\n\005Ch"
  "unk\022\016\n\006offset\030\001 \001(\003\022\016\n\006length\030\002 \001(\005\032S\n\003P"
  "BA\022\016\n\006csd_id\030\001 \001(\t\022<\n\006chunks\030\002 \003(\0132,.Sto"
  "rageEngineInstance.LBA2PBAResponse.Chunk"
  "\032\\\n\016SstPbaMapEntry\022\013\n\003key\030\001 \001(\t\0229\n\005value"
  "\030\002 \001(\0132*.StorageEngineInstance.LBA2PBARe"
  "sponse.PBA:\0028\001\"\033\n\007SSTList\022\020\n\010sst_list\030\001 "
  "\003(\t\"\335\001\n\014DataFileInfo\022G\n\013sst_csd_map\030\001 \003("
  "\01322.StorageEngineInstance.DataFileInfo.S"
  "stCsdMapEntry\032)\n\003CSD\022\016\n\006csd_id\030\001 \003(\t\022\022\n\n"
  "is_primary\030\002 \003(\010\032Y\n\016SstCsdMapEntry\022\013\n\003ke"
  "y\030\001 \001(\t\0226\n\005value\030\002 \001(\0132\'.StorageEngineIn"
  "stance.DataFileInfo.CSD:\0028\0012\311\001\n\016StorageM"
  "anager\022X\n\017GetDataFileInfo\022\036.StorageEngin"
  "eInstance.SSTList\032#.StorageEngineInstanc"
  "e.DataFileInfo\"\000\022]\n\nRequestPBA\022%.Storage"
  "EngineInstance.LBA2PBARequest\032&.StorageE"
  "ngineInstance.LBA2PBAResponse\"\000B6\n\026io.gr"
  "pc.snippet_sampleB\024snippet_sample_ProtoP"
  "\001\242\002\003SSPb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_storage_2dmanager_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_storage_2dmanager_2eproto = {
    false, false, 1055, descriptor_table_protodef_storage_2dmanager_2eproto,
    "storage-manager.proto",
    &descriptor_table_storage_2dmanager_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_storage_2dmanager_2eproto::offsets,
    file_level_metadata_storage_2dmanager_2eproto, file_level_enum_descriptors_storage_2dmanager_2eproto,
    file_level_service_descriptors_storage_2dmanager_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_storage_2dmanager_2eproto_getter() {
  return &descriptor_table_storage_2dmanager_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_storage_2dmanager_2eproto(&descriptor_table_storage_2dmanager_2eproto);
namespace StorageEngineInstance {

// ===================================================================

LBA2PBARequest_SstCsdMapEntry_DoNotUse::LBA2PBARequest_SstCsdMapEntry_DoNotUse() {}
LBA2PBARequest_SstCsdMapEntry_DoNotUse::LBA2PBARequest_SstCsdMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LBA2PBARequest_SstCsdMapEntry_DoNotUse::MergeFrom(const LBA2PBARequest_SstCsdMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LBA2PBARequest_SstCsdMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_storage_2dmanager_2eproto_getter, &descriptor_table_storage_2dmanager_2eproto_once,
      file_level_metadata_storage_2dmanager_2eproto[0]);
}

// ===================================================================

class LBA2PBARequest::_Internal {
 public:
};

LBA2PBARequest::LBA2PBARequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &LBA2PBARequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.LBA2PBARequest)
}
LBA2PBARequest::LBA2PBARequest(const LBA2PBARequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LBA2PBARequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.sst_csd_map_)*/{}
    , decltype(_impl_.table_index_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sst_csd_map_.MergeFrom(from._impl_.sst_csd_map_);
  _this->_impl_.table_index_number_ = from._impl_.table_index_number_;
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.LBA2PBARequest)
}

inline void LBA2PBARequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.sst_csd_map_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.table_index_number_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LBA2PBARequest::~LBA2PBARequest() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.LBA2PBARequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void LBA2PBARequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sst_csd_map_.Destruct();
  _impl_.sst_csd_map_.~MapField();
}

void LBA2PBARequest::ArenaDtor(void* object) {
  LBA2PBARequest* _this = reinterpret_cast< LBA2PBARequest* >(object);
  _this->_impl_.sst_csd_map_.Destruct();
}
void LBA2PBARequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LBA2PBARequest::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.LBA2PBARequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sst_csd_map_.Clear();
  _impl_.table_index_number_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LBA2PBARequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 table_index_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.table_index_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> sst_csd_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.sst_csd_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LBA2PBARequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.LBA2PBARequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 table_index_number = 1;
  if (this->_internal_table_index_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_table_index_number(), target);
  }

  // map<string, string> sst_csd_map = 2;
  if (!this->_internal_sst_csd_map().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = LBA2PBARequest_SstCsdMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_sst_csd_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "StorageEngineInstance.LBA2PBARequest.SstCsdMapEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "StorageEngineInstance.LBA2PBARequest.SstCsdMapEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.LBA2PBARequest)
  return target;
}

size_t LBA2PBARequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.LBA2PBARequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> sst_csd_map = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sst_csd_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_sst_csd_map().begin();
      it != this->_internal_sst_csd_map().end(); ++it) {
    total_size += LBA2PBARequest_SstCsdMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 table_index_number = 1;
  if (this->_internal_table_index_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_table_index_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LBA2PBARequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LBA2PBARequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LBA2PBARequest::GetClassData() const { return &_class_data_; }


void LBA2PBARequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LBA2PBARequest*>(&to_msg);
  auto& from = static_cast<const LBA2PBARequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.LBA2PBARequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sst_csd_map_.MergeFrom(from._impl_.sst_csd_map_);
  if (from._internal_table_index_number() != 0) {
    _this->_internal_set_table_index_number(from._internal_table_index_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LBA2PBARequest::CopyFrom(const LBA2PBARequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.LBA2PBARequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LBA2PBARequest::IsInitialized() const {
  return true;
}

void LBA2PBARequest::InternalSwap(LBA2PBARequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sst_csd_map_.InternalSwap(&other->_impl_.sst_csd_map_);
  swap(_impl_.table_index_number_, other->_impl_.table_index_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LBA2PBARequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_storage_2dmanager_2eproto_getter, &descriptor_table_storage_2dmanager_2eproto_once,
      file_level_metadata_storage_2dmanager_2eproto[1]);
}

// ===================================================================

class LBA2PBAResponse_Chunk::_Internal {
 public:
};

LBA2PBAResponse_Chunk::LBA2PBAResponse_Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.LBA2PBAResponse.Chunk)
}
LBA2PBAResponse_Chunk::LBA2PBAResponse_Chunk(const LBA2PBAResponse_Chunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LBA2PBAResponse_Chunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.offset_){}
    , decltype(_impl_.length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.offset_, &from._impl_.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.length_) -
    reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.length_));
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.LBA2PBAResponse.Chunk)
}

inline void LBA2PBAResponse_Chunk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.offset_){int64_t{0}}
    , decltype(_impl_.length_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LBA2PBAResponse_Chunk::~LBA2PBAResponse_Chunk() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.LBA2PBAResponse.Chunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LBA2PBAResponse_Chunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LBA2PBAResponse_Chunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LBA2PBAResponse_Chunk::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.LBA2PBAResponse.Chunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.length_) -
      reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LBA2PBAResponse_Chunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LBA2PBAResponse_Chunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.LBA2PBAResponse.Chunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_offset(), target);
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.LBA2PBAResponse.Chunk)
  return target;
}

size_t LBA2PBAResponse_Chunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.LBA2PBAResponse.Chunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 offset = 1;
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_offset());
  }

  // int32 length = 2;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LBA2PBAResponse_Chunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LBA2PBAResponse_Chunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LBA2PBAResponse_Chunk::GetClassData() const { return &_class_data_; }


void LBA2PBAResponse_Chunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LBA2PBAResponse_Chunk*>(&to_msg);
  auto& from = static_cast<const LBA2PBAResponse_Chunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.LBA2PBAResponse.Chunk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LBA2PBAResponse_Chunk::CopyFrom(const LBA2PBAResponse_Chunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.LBA2PBAResponse.Chunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LBA2PBAResponse_Chunk::IsInitialized() const {
  return true;
}

void LBA2PBAResponse_Chunk::InternalSwap(LBA2PBAResponse_Chunk* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LBA2PBAResponse_Chunk, _impl_.length_)
      + sizeof(LBA2PBAResponse_Chunk::_impl_.length_)
      - PROTOBUF_FIELD_OFFSET(LBA2PBAResponse_Chunk, _impl_.offset_)>(
          reinterpret_cast<char*>(&_impl_.offset_),
          reinterpret_cast<char*>(&other->_impl_.offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LBA2PBAResponse_Chunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_storage_2dmanager_2eproto_getter, &descriptor_table_storage_2dmanager_2eproto_once,
      file_level_metadata_storage_2dmanager_2eproto[2]);
}

// ===================================================================

class LBA2PBAResponse_PBA::_Internal {
 public:
};

LBA2PBAResponse_PBA::LBA2PBAResponse_PBA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.LBA2PBAResponse.PBA)
}
LBA2PBAResponse_PBA::LBA2PBAResponse_PBA(const LBA2PBAResponse_PBA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LBA2PBAResponse_PBA* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chunks_){from._impl_.chunks_}
    , decltype(_impl_.csd_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.csd_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.csd_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_csd_id().empty()) {
    _this->_impl_.csd_id_.Set(from._internal_csd_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.LBA2PBAResponse.PBA)
}

inline void LBA2PBAResponse_PBA::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chunks_){arena}
    , decltype(_impl_.csd_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.csd_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.csd_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LBA2PBAResponse_PBA::~LBA2PBAResponse_PBA() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.LBA2PBAResponse.PBA)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LBA2PBAResponse_PBA::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chunks_.~RepeatedPtrField();
  _impl_.csd_id_.Destroy();
}

void LBA2PBAResponse_PBA::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LBA2PBAResponse_PBA::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.LBA2PBAResponse.PBA)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chunks_.Clear();
  _impl_.csd_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LBA2PBAResponse_PBA::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string csd_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_csd_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StorageEngineInstance.LBA2PBAResponse.PBA.csd_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .StorageEngineInstance.LBA2PBAResponse.Chunk chunks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LBA2PBAResponse_PBA::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.LBA2PBAResponse.PBA)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string csd_id = 1;
  if (!this->_internal_csd_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_csd_id().data(), static_cast<int>(this->_internal_csd_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.LBA2PBAResponse.PBA.csd_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_csd_id(), target);
  }

  // repeated .StorageEngineInstance.LBA2PBAResponse.Chunk chunks = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chunks_size()); i < n; i++) {
    const auto& repfield = this->_internal_chunks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.LBA2PBAResponse.PBA)
  return target;
}

size_t LBA2PBAResponse_PBA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.LBA2PBAResponse.PBA)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .StorageEngineInstance.LBA2PBAResponse.Chunk chunks = 2;
  total_size += 1UL * this->_internal_chunks_size();
  for (const auto& msg : this->_impl_.chunks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string csd_id = 1;
  if (!this->_internal_csd_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_csd_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LBA2PBAResponse_PBA::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LBA2PBAResponse_PBA::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LBA2PBAResponse_PBA::GetClassData() const { return &_class_data_; }


void LBA2PBAResponse_PBA::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LBA2PBAResponse_PBA*>(&to_msg);
  auto& from = static_cast<const LBA2PBAResponse_PBA&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.LBA2PBAResponse.PBA)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chunks_.MergeFrom(from._impl_.chunks_);
  if (!from._internal_csd_id().empty()) {
    _this->_internal_set_csd_id(from._internal_csd_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LBA2PBAResponse_PBA::CopyFrom(const LBA2PBAResponse_PBA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.LBA2PBAResponse.PBA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LBA2PBAResponse_PBA::IsInitialized() const {
  return true;
}

void LBA2PBAResponse_PBA::InternalSwap(LBA2PBAResponse_PBA* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chunks_.InternalSwap(&other->_impl_.chunks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.csd_id_, lhs_arena,
      &other->_impl_.csd_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LBA2PBAResponse_PBA::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_storage_2dmanager_2eproto_getter, &descriptor_table_storage_2dmanager_2eproto_once,
      file_level_metadata_storage_2dmanager_2eproto[3]);
}

// ===================================================================

LBA2PBAResponse_SstPbaMapEntry_DoNotUse::LBA2PBAResponse_SstPbaMapEntry_DoNotUse() {}
LBA2PBAResponse_SstPbaMapEntry_DoNotUse::LBA2PBAResponse_SstPbaMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LBA2PBAResponse_SstPbaMapEntry_DoNotUse::MergeFrom(const LBA2PBAResponse_SstPbaMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LBA2PBAResponse_SstPbaMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_storage_2dmanager_2eproto_getter, &descriptor_table_storage_2dmanager_2eproto_once,
      file_level_metadata_storage_2dmanager_2eproto[4]);
}

// ===================================================================

class LBA2PBAResponse::_Internal {
 public:
};

LBA2PBAResponse::LBA2PBAResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &LBA2PBAResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.LBA2PBAResponse)
}
LBA2PBAResponse::LBA2PBAResponse(const LBA2PBAResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LBA2PBAResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.sst_pba_map_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sst_pba_map_.MergeFrom(from._impl_.sst_pba_map_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.LBA2PBAResponse)
}

inline void LBA2PBAResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.sst_pba_map_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LBA2PBAResponse::~LBA2PBAResponse() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.LBA2PBAResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void LBA2PBAResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sst_pba_map_.Destruct();
  _impl_.sst_pba_map_.~MapField();
}

void LBA2PBAResponse::ArenaDtor(void* object) {
  LBA2PBAResponse* _this = reinterpret_cast< LBA2PBAResponse* >(object);
  _this->_impl_.sst_pba_map_.Destruct();
}
void LBA2PBAResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LBA2PBAResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.LBA2PBAResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sst_pba_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LBA2PBAResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .StorageEngineInstance.LBA2PBAResponse.PBA> sst_pba_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.sst_pba_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LBA2PBAResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.LBA2PBAResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .StorageEngineInstance.LBA2PBAResponse.PBA> sst_pba_map = 1;
  if (!this->_internal_sst_pba_map().empty()) {
    using MapType = ::_pb::Map<std::string, ::StorageEngineInstance::LBA2PBAResponse_PBA>;
    using WireHelper = LBA2PBAResponse_SstPbaMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_sst_pba_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "StorageEngineInstance.LBA2PBAResponse.SstPbaMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.LBA2PBAResponse)
  return target;
}

size_t LBA2PBAResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.LBA2PBAResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .StorageEngineInstance.LBA2PBAResponse.PBA> sst_pba_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sst_pba_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::LBA2PBAResponse_PBA >::const_iterator
      it = this->_internal_sst_pba_map().begin();
      it != this->_internal_sst_pba_map().end(); ++it) {
    total_size += LBA2PBAResponse_SstPbaMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LBA2PBAResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LBA2PBAResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LBA2PBAResponse::GetClassData() const { return &_class_data_; }


void LBA2PBAResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LBA2PBAResponse*>(&to_msg);
  auto& from = static_cast<const LBA2PBAResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.LBA2PBAResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sst_pba_map_.MergeFrom(from._impl_.sst_pba_map_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LBA2PBAResponse::CopyFrom(const LBA2PBAResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.LBA2PBAResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LBA2PBAResponse::IsInitialized() const {
  return true;
}

void LBA2PBAResponse::InternalSwap(LBA2PBAResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sst_pba_map_.InternalSwap(&other->_impl_.sst_pba_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LBA2PBAResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_storage_2dmanager_2eproto_getter, &descriptor_table_storage_2dmanager_2eproto_once,
      file_level_metadata_storage_2dmanager_2eproto[5]);
}

// ===================================================================

class SSTList::_Internal {
 public:
};

SSTList::SSTList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.SSTList)
}
SSTList::SSTList(const SSTList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SSTList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sst_list_){from._impl_.sst_list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.SSTList)
}

inline void SSTList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sst_list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SSTList::~SSTList() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.SSTList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSTList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sst_list_.~RepeatedPtrField();
}

void SSTList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SSTList::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.SSTList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sst_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSTList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string sst_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sst_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "StorageEngineInstance.SSTList.sst_list"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSTList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.SSTList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string sst_list = 1;
  for (int i = 0, n = this->_internal_sst_list_size(); i < n; i++) {
    const auto& s = this->_internal_sst_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.SSTList.sst_list");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.SSTList)
  return target;
}

size_t SSTList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.SSTList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string sst_list = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.sst_list_.size());
  for (int i = 0, n = _impl_.sst_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.sst_list_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSTList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SSTList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSTList::GetClassData() const { return &_class_data_; }


void SSTList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SSTList*>(&to_msg);
  auto& from = static_cast<const SSTList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.SSTList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sst_list_.MergeFrom(from._impl_.sst_list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSTList::CopyFrom(const SSTList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.SSTList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSTList::IsInitialized() const {
  return true;
}

void SSTList::InternalSwap(SSTList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sst_list_.InternalSwap(&other->_impl_.sst_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSTList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_storage_2dmanager_2eproto_getter, &descriptor_table_storage_2dmanager_2eproto_once,
      file_level_metadata_storage_2dmanager_2eproto[6]);
}

// ===================================================================

class DataFileInfo_CSD::_Internal {
 public:
};

DataFileInfo_CSD::DataFileInfo_CSD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.DataFileInfo.CSD)
}
DataFileInfo_CSD::DataFileInfo_CSD(const DataFileInfo_CSD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataFileInfo_CSD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.csd_id_){from._impl_.csd_id_}
    , decltype(_impl_.is_primary_){from._impl_.is_primary_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.DataFileInfo.CSD)
}

inline void DataFileInfo_CSD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.csd_id_){arena}
    , decltype(_impl_.is_primary_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DataFileInfo_CSD::~DataFileInfo_CSD() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.DataFileInfo.CSD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataFileInfo_CSD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.csd_id_.~RepeatedPtrField();
  _impl_.is_primary_.~RepeatedField();
}

void DataFileInfo_CSD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataFileInfo_CSD::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.DataFileInfo.CSD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.csd_id_.Clear();
  _impl_.is_primary_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataFileInfo_CSD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string csd_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_csd_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "StorageEngineInstance.DataFileInfo.CSD.csd_id"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bool is_primary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_is_primary(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_is_primary(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataFileInfo_CSD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.DataFileInfo.CSD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string csd_id = 1;
  for (int i = 0, n = this->_internal_csd_id_size(); i < n; i++) {
    const auto& s = this->_internal_csd_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StorageEngineInstance.DataFileInfo.CSD.csd_id");
    target = stream->WriteString(1, s, target);
  }

  // repeated bool is_primary = 2;
  if (this->_internal_is_primary_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_is_primary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.DataFileInfo.CSD)
  return target;
}

size_t DataFileInfo_CSD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.DataFileInfo.CSD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string csd_id = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.csd_id_.size());
  for (int i = 0, n = _impl_.csd_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.csd_id_.Get(i));
  }

  // repeated bool is_primary = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_is_primary_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataFileInfo_CSD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataFileInfo_CSD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataFileInfo_CSD::GetClassData() const { return &_class_data_; }


void DataFileInfo_CSD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataFileInfo_CSD*>(&to_msg);
  auto& from = static_cast<const DataFileInfo_CSD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.DataFileInfo.CSD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.csd_id_.MergeFrom(from._impl_.csd_id_);
  _this->_impl_.is_primary_.MergeFrom(from._impl_.is_primary_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataFileInfo_CSD::CopyFrom(const DataFileInfo_CSD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.DataFileInfo.CSD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataFileInfo_CSD::IsInitialized() const {
  return true;
}

void DataFileInfo_CSD::InternalSwap(DataFileInfo_CSD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.csd_id_.InternalSwap(&other->_impl_.csd_id_);
  _impl_.is_primary_.InternalSwap(&other->_impl_.is_primary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataFileInfo_CSD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_storage_2dmanager_2eproto_getter, &descriptor_table_storage_2dmanager_2eproto_once,
      file_level_metadata_storage_2dmanager_2eproto[7]);
}

// ===================================================================

DataFileInfo_SstCsdMapEntry_DoNotUse::DataFileInfo_SstCsdMapEntry_DoNotUse() {}
DataFileInfo_SstCsdMapEntry_DoNotUse::DataFileInfo_SstCsdMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DataFileInfo_SstCsdMapEntry_DoNotUse::MergeFrom(const DataFileInfo_SstCsdMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DataFileInfo_SstCsdMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_storage_2dmanager_2eproto_getter, &descriptor_table_storage_2dmanager_2eproto_once,
      file_level_metadata_storage_2dmanager_2eproto[8]);
}

// ===================================================================

class DataFileInfo::_Internal {
 public:
};

DataFileInfo::DataFileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &DataFileInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:StorageEngineInstance.DataFileInfo)
}
DataFileInfo::DataFileInfo(const DataFileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataFileInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.sst_csd_map_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sst_csd_map_.MergeFrom(from._impl_.sst_csd_map_);
  // @@protoc_insertion_point(copy_constructor:StorageEngineInstance.DataFileInfo)
}

inline void DataFileInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.sst_csd_map_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DataFileInfo::~DataFileInfo() {
  // @@protoc_insertion_point(destructor:StorageEngineInstance.DataFileInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void DataFileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sst_csd_map_.Destruct();
  _impl_.sst_csd_map_.~MapField();
}

void DataFileInfo::ArenaDtor(void* object) {
  DataFileInfo* _this = reinterpret_cast< DataFileInfo* >(object);
  _this->_impl_.sst_csd_map_.Destruct();
}
void DataFileInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataFileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:StorageEngineInstance.DataFileInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sst_csd_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataFileInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .StorageEngineInstance.DataFileInfo.CSD> sst_csd_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.sst_csd_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataFileInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StorageEngineInstance.DataFileInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .StorageEngineInstance.DataFileInfo.CSD> sst_csd_map = 1;
  if (!this->_internal_sst_csd_map().empty()) {
    using MapType = ::_pb::Map<std::string, ::StorageEngineInstance::DataFileInfo_CSD>;
    using WireHelper = DataFileInfo_SstCsdMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_sst_csd_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "StorageEngineInstance.DataFileInfo.SstCsdMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StorageEngineInstance.DataFileInfo)
  return target;
}

size_t DataFileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StorageEngineInstance.DataFileInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .StorageEngineInstance.DataFileInfo.CSD> sst_csd_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sst_csd_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DataFileInfo_CSD >::const_iterator
      it = this->_internal_sst_csd_map().begin();
      it != this->_internal_sst_csd_map().end(); ++it) {
    total_size += DataFileInfo_SstCsdMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataFileInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataFileInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataFileInfo::GetClassData() const { return &_class_data_; }


void DataFileInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataFileInfo*>(&to_msg);
  auto& from = static_cast<const DataFileInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StorageEngineInstance.DataFileInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sst_csd_map_.MergeFrom(from._impl_.sst_csd_map_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataFileInfo::CopyFrom(const DataFileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StorageEngineInstance.DataFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataFileInfo::IsInitialized() const {
  return true;
}

void DataFileInfo::InternalSwap(DataFileInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sst_csd_map_.InternalSwap(&other->_impl_.sst_csd_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataFileInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_storage_2dmanager_2eproto_getter, &descriptor_table_storage_2dmanager_2eproto_once,
      file_level_metadata_storage_2dmanager_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace StorageEngineInstance
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::LBA2PBARequest_SstCsdMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::StorageEngineInstance::LBA2PBARequest_SstCsdMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::LBA2PBARequest_SstCsdMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::LBA2PBARequest*
Arena::CreateMaybeMessage< ::StorageEngineInstance::LBA2PBARequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::LBA2PBARequest >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::LBA2PBAResponse_Chunk*
Arena::CreateMaybeMessage< ::StorageEngineInstance::LBA2PBAResponse_Chunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::LBA2PBAResponse_Chunk >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::LBA2PBAResponse_PBA*
Arena::CreateMaybeMessage< ::StorageEngineInstance::LBA2PBAResponse_PBA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::LBA2PBAResponse_PBA >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::LBA2PBAResponse_SstPbaMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::StorageEngineInstance::LBA2PBAResponse_SstPbaMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::LBA2PBAResponse_SstPbaMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::LBA2PBAResponse*
Arena::CreateMaybeMessage< ::StorageEngineInstance::LBA2PBAResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::LBA2PBAResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::SSTList*
Arena::CreateMaybeMessage< ::StorageEngineInstance::SSTList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::SSTList >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::DataFileInfo_CSD*
Arena::CreateMaybeMessage< ::StorageEngineInstance::DataFileInfo_CSD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::DataFileInfo_CSD >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::DataFileInfo_SstCsdMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::StorageEngineInstance::DataFileInfo_SstCsdMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::DataFileInfo_SstCsdMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::StorageEngineInstance::DataFileInfo*
Arena::CreateMaybeMessage< ::StorageEngineInstance::DataFileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StorageEngineInstance::DataFileInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
