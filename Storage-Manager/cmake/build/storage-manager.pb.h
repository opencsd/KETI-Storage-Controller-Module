// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage-manager.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_storage_2dmanager_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_storage_2dmanager_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_storage_2dmanager_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_storage_2dmanager_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_storage_2dmanager_2eproto;
namespace StorageEngineInstance {
class DataFileInfo;
struct DataFileInfoDefaultTypeInternal;
extern DataFileInfoDefaultTypeInternal _DataFileInfo_default_instance_;
class DataFileInfo_CSD;
struct DataFileInfo_CSDDefaultTypeInternal;
extern DataFileInfo_CSDDefaultTypeInternal _DataFileInfo_CSD_default_instance_;
class DataFileInfo_SstCsdMapEntry_DoNotUse;
struct DataFileInfo_SstCsdMapEntry_DoNotUseDefaultTypeInternal;
extern DataFileInfo_SstCsdMapEntry_DoNotUseDefaultTypeInternal _DataFileInfo_SstCsdMapEntry_DoNotUse_default_instance_;
class LBA2PBARequest;
struct LBA2PBARequestDefaultTypeInternal;
extern LBA2PBARequestDefaultTypeInternal _LBA2PBARequest_default_instance_;
class LBA2PBARequest_SstCsdMapEntry_DoNotUse;
struct LBA2PBARequest_SstCsdMapEntry_DoNotUseDefaultTypeInternal;
extern LBA2PBARequest_SstCsdMapEntry_DoNotUseDefaultTypeInternal _LBA2PBARequest_SstCsdMapEntry_DoNotUse_default_instance_;
class LBA2PBAResponse;
struct LBA2PBAResponseDefaultTypeInternal;
extern LBA2PBAResponseDefaultTypeInternal _LBA2PBAResponse_default_instance_;
class LBA2PBAResponse_Chunk;
struct LBA2PBAResponse_ChunkDefaultTypeInternal;
extern LBA2PBAResponse_ChunkDefaultTypeInternal _LBA2PBAResponse_Chunk_default_instance_;
class LBA2PBAResponse_PBA;
struct LBA2PBAResponse_PBADefaultTypeInternal;
extern LBA2PBAResponse_PBADefaultTypeInternal _LBA2PBAResponse_PBA_default_instance_;
class LBA2PBAResponse_SstPbaMapEntry_DoNotUse;
struct LBA2PBAResponse_SstPbaMapEntry_DoNotUseDefaultTypeInternal;
extern LBA2PBAResponse_SstPbaMapEntry_DoNotUseDefaultTypeInternal _LBA2PBAResponse_SstPbaMapEntry_DoNotUse_default_instance_;
class SSTList;
struct SSTListDefaultTypeInternal;
extern SSTListDefaultTypeInternal _SSTList_default_instance_;
}  // namespace StorageEngineInstance
PROTOBUF_NAMESPACE_OPEN
template<> ::StorageEngineInstance::DataFileInfo* Arena::CreateMaybeMessage<::StorageEngineInstance::DataFileInfo>(Arena*);
template<> ::StorageEngineInstance::DataFileInfo_CSD* Arena::CreateMaybeMessage<::StorageEngineInstance::DataFileInfo_CSD>(Arena*);
template<> ::StorageEngineInstance::DataFileInfo_SstCsdMapEntry_DoNotUse* Arena::CreateMaybeMessage<::StorageEngineInstance::DataFileInfo_SstCsdMapEntry_DoNotUse>(Arena*);
template<> ::StorageEngineInstance::LBA2PBARequest* Arena::CreateMaybeMessage<::StorageEngineInstance::LBA2PBARequest>(Arena*);
template<> ::StorageEngineInstance::LBA2PBARequest_SstCsdMapEntry_DoNotUse* Arena::CreateMaybeMessage<::StorageEngineInstance::LBA2PBARequest_SstCsdMapEntry_DoNotUse>(Arena*);
template<> ::StorageEngineInstance::LBA2PBAResponse* Arena::CreateMaybeMessage<::StorageEngineInstance::LBA2PBAResponse>(Arena*);
template<> ::StorageEngineInstance::LBA2PBAResponse_Chunk* Arena::CreateMaybeMessage<::StorageEngineInstance::LBA2PBAResponse_Chunk>(Arena*);
template<> ::StorageEngineInstance::LBA2PBAResponse_PBA* Arena::CreateMaybeMessage<::StorageEngineInstance::LBA2PBAResponse_PBA>(Arena*);
template<> ::StorageEngineInstance::LBA2PBAResponse_SstPbaMapEntry_DoNotUse* Arena::CreateMaybeMessage<::StorageEngineInstance::LBA2PBAResponse_SstPbaMapEntry_DoNotUse>(Arena*);
template<> ::StorageEngineInstance::SSTList* Arena::CreateMaybeMessage<::StorageEngineInstance::SSTList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace StorageEngineInstance {

// ===================================================================

class LBA2PBARequest_SstCsdMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LBA2PBARequest_SstCsdMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LBA2PBARequest_SstCsdMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  LBA2PBARequest_SstCsdMapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR LBA2PBARequest_SstCsdMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit LBA2PBARequest_SstCsdMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const LBA2PBARequest_SstCsdMapEntry_DoNotUse& other);
  static const LBA2PBARequest_SstCsdMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LBA2PBARequest_SstCsdMapEntry_DoNotUse*>(&_LBA2PBARequest_SstCsdMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "StorageEngineInstance.LBA2PBARequest.SstCsdMapEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "StorageEngineInstance.LBA2PBARequest.SstCsdMapEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_storage_2dmanager_2eproto;
};

// -------------------------------------------------------------------

class LBA2PBARequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.LBA2PBARequest) */ {
 public:
  inline LBA2PBARequest() : LBA2PBARequest(nullptr) {}
  ~LBA2PBARequest() override;
  explicit PROTOBUF_CONSTEXPR LBA2PBARequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LBA2PBARequest(const LBA2PBARequest& from);
  LBA2PBARequest(LBA2PBARequest&& from) noexcept
    : LBA2PBARequest() {
    *this = ::std::move(from);
  }

  inline LBA2PBARequest& operator=(const LBA2PBARequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LBA2PBARequest& operator=(LBA2PBARequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LBA2PBARequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LBA2PBARequest* internal_default_instance() {
    return reinterpret_cast<const LBA2PBARequest*>(
               &_LBA2PBARequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LBA2PBARequest& a, LBA2PBARequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LBA2PBARequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LBA2PBARequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LBA2PBARequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LBA2PBARequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LBA2PBARequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LBA2PBARequest& from) {
    LBA2PBARequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LBA2PBARequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.LBA2PBARequest";
  }
  protected:
  explicit LBA2PBARequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSstCsdMapFieldNumber = 2,
    kTableIndexNumberFieldNumber = 1,
  };
  // map<string, string> sst_csd_map = 2;
  int sst_csd_map_size() const;
  private:
  int _internal_sst_csd_map_size() const;
  public:
  void clear_sst_csd_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_sst_csd_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_sst_csd_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      sst_csd_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_sst_csd_map();

  // int32 table_index_number = 1;
  void clear_table_index_number();
  int32_t table_index_number() const;
  void set_table_index_number(int32_t value);
  private:
  int32_t _internal_table_index_number() const;
  void _internal_set_table_index_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.LBA2PBARequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        LBA2PBARequest_SstCsdMapEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> sst_csd_map_;
    int32_t table_index_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_storage_2dmanager_2eproto;
};
// -------------------------------------------------------------------

class LBA2PBAResponse_Chunk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.LBA2PBAResponse.Chunk) */ {
 public:
  inline LBA2PBAResponse_Chunk() : LBA2PBAResponse_Chunk(nullptr) {}
  ~LBA2PBAResponse_Chunk() override;
  explicit PROTOBUF_CONSTEXPR LBA2PBAResponse_Chunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LBA2PBAResponse_Chunk(const LBA2PBAResponse_Chunk& from);
  LBA2PBAResponse_Chunk(LBA2PBAResponse_Chunk&& from) noexcept
    : LBA2PBAResponse_Chunk() {
    *this = ::std::move(from);
  }

  inline LBA2PBAResponse_Chunk& operator=(const LBA2PBAResponse_Chunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline LBA2PBAResponse_Chunk& operator=(LBA2PBAResponse_Chunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LBA2PBAResponse_Chunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const LBA2PBAResponse_Chunk* internal_default_instance() {
    return reinterpret_cast<const LBA2PBAResponse_Chunk*>(
               &_LBA2PBAResponse_Chunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LBA2PBAResponse_Chunk& a, LBA2PBAResponse_Chunk& b) {
    a.Swap(&b);
  }
  inline void Swap(LBA2PBAResponse_Chunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LBA2PBAResponse_Chunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LBA2PBAResponse_Chunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LBA2PBAResponse_Chunk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LBA2PBAResponse_Chunk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LBA2PBAResponse_Chunk& from) {
    LBA2PBAResponse_Chunk::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LBA2PBAResponse_Chunk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.LBA2PBAResponse.Chunk";
  }
  protected:
  explicit LBA2PBAResponse_Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // int64 offset = 1;
  void clear_offset();
  int64_t offset() const;
  void set_offset(int64_t value);
  private:
  int64_t _internal_offset() const;
  void _internal_set_offset(int64_t value);
  public:

  // int32 length = 2;
  void clear_length();
  int32_t length() const;
  void set_length(int32_t value);
  private:
  int32_t _internal_length() const;
  void _internal_set_length(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.LBA2PBAResponse.Chunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t offset_;
    int32_t length_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_storage_2dmanager_2eproto;
};
// -------------------------------------------------------------------

class LBA2PBAResponse_PBA final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.LBA2PBAResponse.PBA) */ {
 public:
  inline LBA2PBAResponse_PBA() : LBA2PBAResponse_PBA(nullptr) {}
  ~LBA2PBAResponse_PBA() override;
  explicit PROTOBUF_CONSTEXPR LBA2PBAResponse_PBA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LBA2PBAResponse_PBA(const LBA2PBAResponse_PBA& from);
  LBA2PBAResponse_PBA(LBA2PBAResponse_PBA&& from) noexcept
    : LBA2PBAResponse_PBA() {
    *this = ::std::move(from);
  }

  inline LBA2PBAResponse_PBA& operator=(const LBA2PBAResponse_PBA& from) {
    CopyFrom(from);
    return *this;
  }
  inline LBA2PBAResponse_PBA& operator=(LBA2PBAResponse_PBA&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LBA2PBAResponse_PBA& default_instance() {
    return *internal_default_instance();
  }
  static inline const LBA2PBAResponse_PBA* internal_default_instance() {
    return reinterpret_cast<const LBA2PBAResponse_PBA*>(
               &_LBA2PBAResponse_PBA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LBA2PBAResponse_PBA& a, LBA2PBAResponse_PBA& b) {
    a.Swap(&b);
  }
  inline void Swap(LBA2PBAResponse_PBA* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LBA2PBAResponse_PBA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LBA2PBAResponse_PBA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LBA2PBAResponse_PBA>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LBA2PBAResponse_PBA& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LBA2PBAResponse_PBA& from) {
    LBA2PBAResponse_PBA::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LBA2PBAResponse_PBA* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.LBA2PBAResponse.PBA";
  }
  protected:
  explicit LBA2PBAResponse_PBA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunksFieldNumber = 2,
    kCsdIdFieldNumber = 1,
  };
  // repeated .StorageEngineInstance.LBA2PBAResponse.Chunk chunks = 2;
  int chunks_size() const;
  private:
  int _internal_chunks_size() const;
  public:
  void clear_chunks();
  ::StorageEngineInstance::LBA2PBAResponse_Chunk* mutable_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::LBA2PBAResponse_Chunk >*
      mutable_chunks();
  private:
  const ::StorageEngineInstance::LBA2PBAResponse_Chunk& _internal_chunks(int index) const;
  ::StorageEngineInstance::LBA2PBAResponse_Chunk* _internal_add_chunks();
  public:
  const ::StorageEngineInstance::LBA2PBAResponse_Chunk& chunks(int index) const;
  ::StorageEngineInstance::LBA2PBAResponse_Chunk* add_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::LBA2PBAResponse_Chunk >&
      chunks() const;

  // string csd_id = 1;
  void clear_csd_id();
  const std::string& csd_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_csd_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_csd_id();
  PROTOBUF_NODISCARD std::string* release_csd_id();
  void set_allocated_csd_id(std::string* csd_id);
  private:
  const std::string& _internal_csd_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_csd_id(const std::string& value);
  std::string* _internal_mutable_csd_id();
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.LBA2PBAResponse.PBA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::LBA2PBAResponse_Chunk > chunks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr csd_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_storage_2dmanager_2eproto;
};
// -------------------------------------------------------------------

class LBA2PBAResponse_SstPbaMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LBA2PBAResponse_SstPbaMapEntry_DoNotUse, 
    std::string, ::StorageEngineInstance::LBA2PBAResponse_PBA,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LBA2PBAResponse_SstPbaMapEntry_DoNotUse, 
    std::string, ::StorageEngineInstance::LBA2PBAResponse_PBA,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  LBA2PBAResponse_SstPbaMapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR LBA2PBAResponse_SstPbaMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit LBA2PBAResponse_SstPbaMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const LBA2PBAResponse_SstPbaMapEntry_DoNotUse& other);
  static const LBA2PBAResponse_SstPbaMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LBA2PBAResponse_SstPbaMapEntry_DoNotUse*>(&_LBA2PBAResponse_SstPbaMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "StorageEngineInstance.LBA2PBAResponse.SstPbaMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_storage_2dmanager_2eproto;
};

// -------------------------------------------------------------------

class LBA2PBAResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.LBA2PBAResponse) */ {
 public:
  inline LBA2PBAResponse() : LBA2PBAResponse(nullptr) {}
  ~LBA2PBAResponse() override;
  explicit PROTOBUF_CONSTEXPR LBA2PBAResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LBA2PBAResponse(const LBA2PBAResponse& from);
  LBA2PBAResponse(LBA2PBAResponse&& from) noexcept
    : LBA2PBAResponse() {
    *this = ::std::move(from);
  }

  inline LBA2PBAResponse& operator=(const LBA2PBAResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LBA2PBAResponse& operator=(LBA2PBAResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LBA2PBAResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LBA2PBAResponse* internal_default_instance() {
    return reinterpret_cast<const LBA2PBAResponse*>(
               &_LBA2PBAResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LBA2PBAResponse& a, LBA2PBAResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LBA2PBAResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LBA2PBAResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LBA2PBAResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LBA2PBAResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LBA2PBAResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LBA2PBAResponse& from) {
    LBA2PBAResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LBA2PBAResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.LBA2PBAResponse";
  }
  protected:
  explicit LBA2PBAResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LBA2PBAResponse_Chunk Chunk;
  typedef LBA2PBAResponse_PBA PBA;

  // accessors -------------------------------------------------------

  enum : int {
    kSstPbaMapFieldNumber = 1,
  };
  // map<string, .StorageEngineInstance.LBA2PBAResponse.PBA> sst_pba_map = 1;
  int sst_pba_map_size() const;
  private:
  int _internal_sst_pba_map_size() const;
  public:
  void clear_sst_pba_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::LBA2PBAResponse_PBA >&
      _internal_sst_pba_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::LBA2PBAResponse_PBA >*
      _internal_mutable_sst_pba_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::LBA2PBAResponse_PBA >&
      sst_pba_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::LBA2PBAResponse_PBA >*
      mutable_sst_pba_map();

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.LBA2PBAResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        LBA2PBAResponse_SstPbaMapEntry_DoNotUse,
        std::string, ::StorageEngineInstance::LBA2PBAResponse_PBA,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> sst_pba_map_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_storage_2dmanager_2eproto;
};
// -------------------------------------------------------------------

class SSTList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.SSTList) */ {
 public:
  inline SSTList() : SSTList(nullptr) {}
  ~SSTList() override;
  explicit PROTOBUF_CONSTEXPR SSTList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSTList(const SSTList& from);
  SSTList(SSTList&& from) noexcept
    : SSTList() {
    *this = ::std::move(from);
  }

  inline SSTList& operator=(const SSTList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSTList& operator=(SSTList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSTList& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSTList* internal_default_instance() {
    return reinterpret_cast<const SSTList*>(
               &_SSTList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SSTList& a, SSTList& b) {
    a.Swap(&b);
  }
  inline void Swap(SSTList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSTList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSTList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSTList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSTList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SSTList& from) {
    SSTList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSTList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.SSTList";
  }
  protected:
  explicit SSTList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSstListFieldNumber = 1,
  };
  // repeated string sst_list = 1;
  int sst_list_size() const;
  private:
  int _internal_sst_list_size() const;
  public:
  void clear_sst_list();
  const std::string& sst_list(int index) const;
  std::string* mutable_sst_list(int index);
  void set_sst_list(int index, const std::string& value);
  void set_sst_list(int index, std::string&& value);
  void set_sst_list(int index, const char* value);
  void set_sst_list(int index, const char* value, size_t size);
  std::string* add_sst_list();
  void add_sst_list(const std::string& value);
  void add_sst_list(std::string&& value);
  void add_sst_list(const char* value);
  void add_sst_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sst_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sst_list();
  private:
  const std::string& _internal_sst_list(int index) const;
  std::string* _internal_add_sst_list();
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.SSTList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sst_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_storage_2dmanager_2eproto;
};
// -------------------------------------------------------------------

class DataFileInfo_CSD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.DataFileInfo.CSD) */ {
 public:
  inline DataFileInfo_CSD() : DataFileInfo_CSD(nullptr) {}
  ~DataFileInfo_CSD() override;
  explicit PROTOBUF_CONSTEXPR DataFileInfo_CSD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataFileInfo_CSD(const DataFileInfo_CSD& from);
  DataFileInfo_CSD(DataFileInfo_CSD&& from) noexcept
    : DataFileInfo_CSD() {
    *this = ::std::move(from);
  }

  inline DataFileInfo_CSD& operator=(const DataFileInfo_CSD& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataFileInfo_CSD& operator=(DataFileInfo_CSD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataFileInfo_CSD& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataFileInfo_CSD* internal_default_instance() {
    return reinterpret_cast<const DataFileInfo_CSD*>(
               &_DataFileInfo_CSD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DataFileInfo_CSD& a, DataFileInfo_CSD& b) {
    a.Swap(&b);
  }
  inline void Swap(DataFileInfo_CSD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataFileInfo_CSD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataFileInfo_CSD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataFileInfo_CSD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataFileInfo_CSD& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DataFileInfo_CSD& from) {
    DataFileInfo_CSD::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataFileInfo_CSD* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.DataFileInfo.CSD";
  }
  protected:
  explicit DataFileInfo_CSD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCsdIdFieldNumber = 1,
    kIsPrimaryFieldNumber = 2,
  };
  // repeated string csd_id = 1;
  int csd_id_size() const;
  private:
  int _internal_csd_id_size() const;
  public:
  void clear_csd_id();
  const std::string& csd_id(int index) const;
  std::string* mutable_csd_id(int index);
  void set_csd_id(int index, const std::string& value);
  void set_csd_id(int index, std::string&& value);
  void set_csd_id(int index, const char* value);
  void set_csd_id(int index, const char* value, size_t size);
  std::string* add_csd_id();
  void add_csd_id(const std::string& value);
  void add_csd_id(std::string&& value);
  void add_csd_id(const char* value);
  void add_csd_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& csd_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_csd_id();
  private:
  const std::string& _internal_csd_id(int index) const;
  std::string* _internal_add_csd_id();
  public:

  // repeated bool is_primary = 2;
  int is_primary_size() const;
  private:
  int _internal_is_primary_size() const;
  public:
  void clear_is_primary();
  private:
  bool _internal_is_primary(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_is_primary() const;
  void _internal_add_is_primary(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_is_primary();
  public:
  bool is_primary(int index) const;
  void set_is_primary(int index, bool value);
  void add_is_primary(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      is_primary() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_is_primary();

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.DataFileInfo.CSD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> csd_id_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > is_primary_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_storage_2dmanager_2eproto;
};
// -------------------------------------------------------------------

class DataFileInfo_SstCsdMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DataFileInfo_SstCsdMapEntry_DoNotUse, 
    std::string, ::StorageEngineInstance::DataFileInfo_CSD,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DataFileInfo_SstCsdMapEntry_DoNotUse, 
    std::string, ::StorageEngineInstance::DataFileInfo_CSD,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  DataFileInfo_SstCsdMapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR DataFileInfo_SstCsdMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit DataFileInfo_SstCsdMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DataFileInfo_SstCsdMapEntry_DoNotUse& other);
  static const DataFileInfo_SstCsdMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DataFileInfo_SstCsdMapEntry_DoNotUse*>(&_DataFileInfo_SstCsdMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "StorageEngineInstance.DataFileInfo.SstCsdMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_storage_2dmanager_2eproto;
};

// -------------------------------------------------------------------

class DataFileInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.DataFileInfo) */ {
 public:
  inline DataFileInfo() : DataFileInfo(nullptr) {}
  ~DataFileInfo() override;
  explicit PROTOBUF_CONSTEXPR DataFileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataFileInfo(const DataFileInfo& from);
  DataFileInfo(DataFileInfo&& from) noexcept
    : DataFileInfo() {
    *this = ::std::move(from);
  }

  inline DataFileInfo& operator=(const DataFileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataFileInfo& operator=(DataFileInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataFileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataFileInfo* internal_default_instance() {
    return reinterpret_cast<const DataFileInfo*>(
               &_DataFileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DataFileInfo& a, DataFileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DataFileInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataFileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataFileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataFileInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataFileInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DataFileInfo& from) {
    DataFileInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataFileInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.DataFileInfo";
  }
  protected:
  explicit DataFileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DataFileInfo_CSD CSD;

  // accessors -------------------------------------------------------

  enum : int {
    kSstCsdMapFieldNumber = 1,
  };
  // map<string, .StorageEngineInstance.DataFileInfo.CSD> sst_csd_map = 1;
  int sst_csd_map_size() const;
  private:
  int _internal_sst_csd_map_size() const;
  public:
  void clear_sst_csd_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DataFileInfo_CSD >&
      _internal_sst_csd_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DataFileInfo_CSD >*
      _internal_mutable_sst_csd_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DataFileInfo_CSD >&
      sst_csd_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DataFileInfo_CSD >*
      mutable_sst_csd_map();

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.DataFileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        DataFileInfo_SstCsdMapEntry_DoNotUse,
        std::string, ::StorageEngineInstance::DataFileInfo_CSD,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> sst_csd_map_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_storage_2dmanager_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LBA2PBARequest

// int32 table_index_number = 1;
inline void LBA2PBARequest::clear_table_index_number() {
  _impl_.table_index_number_ = 0;
}
inline int32_t LBA2PBARequest::_internal_table_index_number() const {
  return _impl_.table_index_number_;
}
inline int32_t LBA2PBARequest::table_index_number() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.LBA2PBARequest.table_index_number)
  return _internal_table_index_number();
}
inline void LBA2PBARequest::_internal_set_table_index_number(int32_t value) {
  
  _impl_.table_index_number_ = value;
}
inline void LBA2PBARequest::set_table_index_number(int32_t value) {
  _internal_set_table_index_number(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.LBA2PBARequest.table_index_number)
}

// map<string, string> sst_csd_map = 2;
inline int LBA2PBARequest::_internal_sst_csd_map_size() const {
  return _impl_.sst_csd_map_.size();
}
inline int LBA2PBARequest::sst_csd_map_size() const {
  return _internal_sst_csd_map_size();
}
inline void LBA2PBARequest::clear_sst_csd_map() {
  _impl_.sst_csd_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LBA2PBARequest::_internal_sst_csd_map() const {
  return _impl_.sst_csd_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LBA2PBARequest::sst_csd_map() const {
  // @@protoc_insertion_point(field_map:StorageEngineInstance.LBA2PBARequest.sst_csd_map)
  return _internal_sst_csd_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LBA2PBARequest::_internal_mutable_sst_csd_map() {
  return _impl_.sst_csd_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LBA2PBARequest::mutable_sst_csd_map() {
  // @@protoc_insertion_point(field_mutable_map:StorageEngineInstance.LBA2PBARequest.sst_csd_map)
  return _internal_mutable_sst_csd_map();
}

// -------------------------------------------------------------------

// LBA2PBAResponse_Chunk

// int64 offset = 1;
inline void LBA2PBAResponse_Chunk::clear_offset() {
  _impl_.offset_ = int64_t{0};
}
inline int64_t LBA2PBAResponse_Chunk::_internal_offset() const {
  return _impl_.offset_;
}
inline int64_t LBA2PBAResponse_Chunk::offset() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.LBA2PBAResponse.Chunk.offset)
  return _internal_offset();
}
inline void LBA2PBAResponse_Chunk::_internal_set_offset(int64_t value) {
  
  _impl_.offset_ = value;
}
inline void LBA2PBAResponse_Chunk::set_offset(int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.LBA2PBAResponse.Chunk.offset)
}

// int32 length = 2;
inline void LBA2PBAResponse_Chunk::clear_length() {
  _impl_.length_ = 0;
}
inline int32_t LBA2PBAResponse_Chunk::_internal_length() const {
  return _impl_.length_;
}
inline int32_t LBA2PBAResponse_Chunk::length() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.LBA2PBAResponse.Chunk.length)
  return _internal_length();
}
inline void LBA2PBAResponse_Chunk::_internal_set_length(int32_t value) {
  
  _impl_.length_ = value;
}
inline void LBA2PBAResponse_Chunk::set_length(int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.LBA2PBAResponse.Chunk.length)
}

// -------------------------------------------------------------------

// LBA2PBAResponse_PBA

// string csd_id = 1;
inline void LBA2PBAResponse_PBA::clear_csd_id() {
  _impl_.csd_id_.ClearToEmpty();
}
inline const std::string& LBA2PBAResponse_PBA::csd_id() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.LBA2PBAResponse.PBA.csd_id)
  return _internal_csd_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LBA2PBAResponse_PBA::set_csd_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.csd_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.LBA2PBAResponse.PBA.csd_id)
}
inline std::string* LBA2PBAResponse_PBA::mutable_csd_id() {
  std::string* _s = _internal_mutable_csd_id();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.LBA2PBAResponse.PBA.csd_id)
  return _s;
}
inline const std::string& LBA2PBAResponse_PBA::_internal_csd_id() const {
  return _impl_.csd_id_.Get();
}
inline void LBA2PBAResponse_PBA::_internal_set_csd_id(const std::string& value) {
  
  _impl_.csd_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LBA2PBAResponse_PBA::_internal_mutable_csd_id() {
  
  return _impl_.csd_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LBA2PBAResponse_PBA::release_csd_id() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.LBA2PBAResponse.PBA.csd_id)
  return _impl_.csd_id_.Release();
}
inline void LBA2PBAResponse_PBA::set_allocated_csd_id(std::string* csd_id) {
  if (csd_id != nullptr) {
    
  } else {
    
  }
  _impl_.csd_id_.SetAllocated(csd_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.csd_id_.IsDefault()) {
    _impl_.csd_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.LBA2PBAResponse.PBA.csd_id)
}

// repeated .StorageEngineInstance.LBA2PBAResponse.Chunk chunks = 2;
inline int LBA2PBAResponse_PBA::_internal_chunks_size() const {
  return _impl_.chunks_.size();
}
inline int LBA2PBAResponse_PBA::chunks_size() const {
  return _internal_chunks_size();
}
inline void LBA2PBAResponse_PBA::clear_chunks() {
  _impl_.chunks_.Clear();
}
inline ::StorageEngineInstance::LBA2PBAResponse_Chunk* LBA2PBAResponse_PBA::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.LBA2PBAResponse.PBA.chunks)
  return _impl_.chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::LBA2PBAResponse_Chunk >*
LBA2PBAResponse_PBA::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.LBA2PBAResponse.PBA.chunks)
  return &_impl_.chunks_;
}
inline const ::StorageEngineInstance::LBA2PBAResponse_Chunk& LBA2PBAResponse_PBA::_internal_chunks(int index) const {
  return _impl_.chunks_.Get(index);
}
inline const ::StorageEngineInstance::LBA2PBAResponse_Chunk& LBA2PBAResponse_PBA::chunks(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.LBA2PBAResponse.PBA.chunks)
  return _internal_chunks(index);
}
inline ::StorageEngineInstance::LBA2PBAResponse_Chunk* LBA2PBAResponse_PBA::_internal_add_chunks() {
  return _impl_.chunks_.Add();
}
inline ::StorageEngineInstance::LBA2PBAResponse_Chunk* LBA2PBAResponse_PBA::add_chunks() {
  ::StorageEngineInstance::LBA2PBAResponse_Chunk* _add = _internal_add_chunks();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.LBA2PBAResponse.PBA.chunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::LBA2PBAResponse_Chunk >&
LBA2PBAResponse_PBA::chunks() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.LBA2PBAResponse.PBA.chunks)
  return _impl_.chunks_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// LBA2PBAResponse

// map<string, .StorageEngineInstance.LBA2PBAResponse.PBA> sst_pba_map = 1;
inline int LBA2PBAResponse::_internal_sst_pba_map_size() const {
  return _impl_.sst_pba_map_.size();
}
inline int LBA2PBAResponse::sst_pba_map_size() const {
  return _internal_sst_pba_map_size();
}
inline void LBA2PBAResponse::clear_sst_pba_map() {
  _impl_.sst_pba_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::LBA2PBAResponse_PBA >&
LBA2PBAResponse::_internal_sst_pba_map() const {
  return _impl_.sst_pba_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::LBA2PBAResponse_PBA >&
LBA2PBAResponse::sst_pba_map() const {
  // @@protoc_insertion_point(field_map:StorageEngineInstance.LBA2PBAResponse.sst_pba_map)
  return _internal_sst_pba_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::LBA2PBAResponse_PBA >*
LBA2PBAResponse::_internal_mutable_sst_pba_map() {
  return _impl_.sst_pba_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::LBA2PBAResponse_PBA >*
LBA2PBAResponse::mutable_sst_pba_map() {
  // @@protoc_insertion_point(field_mutable_map:StorageEngineInstance.LBA2PBAResponse.sst_pba_map)
  return _internal_mutable_sst_pba_map();
}

// -------------------------------------------------------------------

// SSTList

// repeated string sst_list = 1;
inline int SSTList::_internal_sst_list_size() const {
  return _impl_.sst_list_.size();
}
inline int SSTList::sst_list_size() const {
  return _internal_sst_list_size();
}
inline void SSTList::clear_sst_list() {
  _impl_.sst_list_.Clear();
}
inline std::string* SSTList::add_sst_list() {
  std::string* _s = _internal_add_sst_list();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.SSTList.sst_list)
  return _s;
}
inline const std::string& SSTList::_internal_sst_list(int index) const {
  return _impl_.sst_list_.Get(index);
}
inline const std::string& SSTList::sst_list(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.SSTList.sst_list)
  return _internal_sst_list(index);
}
inline std::string* SSTList::mutable_sst_list(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.SSTList.sst_list)
  return _impl_.sst_list_.Mutable(index);
}
inline void SSTList::set_sst_list(int index, const std::string& value) {
  _impl_.sst_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SSTList.sst_list)
}
inline void SSTList::set_sst_list(int index, std::string&& value) {
  _impl_.sst_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.SSTList.sst_list)
}
inline void SSTList::set_sst_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.sst_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.SSTList.sst_list)
}
inline void SSTList::set_sst_list(int index, const char* value, size_t size) {
  _impl_.sst_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.SSTList.sst_list)
}
inline std::string* SSTList::_internal_add_sst_list() {
  return _impl_.sst_list_.Add();
}
inline void SSTList::add_sst_list(const std::string& value) {
  _impl_.sst_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SSTList.sst_list)
}
inline void SSTList::add_sst_list(std::string&& value) {
  _impl_.sst_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.SSTList.sst_list)
}
inline void SSTList::add_sst_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.sst_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.SSTList.sst_list)
}
inline void SSTList::add_sst_list(const char* value, size_t size) {
  _impl_.sst_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.SSTList.sst_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SSTList::sst_list() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.SSTList.sst_list)
  return _impl_.sst_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SSTList::mutable_sst_list() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.SSTList.sst_list)
  return &_impl_.sst_list_;
}

// -------------------------------------------------------------------

// DataFileInfo_CSD

// repeated string csd_id = 1;
inline int DataFileInfo_CSD::_internal_csd_id_size() const {
  return _impl_.csd_id_.size();
}
inline int DataFileInfo_CSD::csd_id_size() const {
  return _internal_csd_id_size();
}
inline void DataFileInfo_CSD::clear_csd_id() {
  _impl_.csd_id_.Clear();
}
inline std::string* DataFileInfo_CSD::add_csd_id() {
  std::string* _s = _internal_add_csd_id();
  // @@protoc_insertion_point(field_add_mutable:StorageEngineInstance.DataFileInfo.CSD.csd_id)
  return _s;
}
inline const std::string& DataFileInfo_CSD::_internal_csd_id(int index) const {
  return _impl_.csd_id_.Get(index);
}
inline const std::string& DataFileInfo_CSD::csd_id(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.DataFileInfo.CSD.csd_id)
  return _internal_csd_id(index);
}
inline std::string* DataFileInfo_CSD::mutable_csd_id(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.DataFileInfo.CSD.csd_id)
  return _impl_.csd_id_.Mutable(index);
}
inline void DataFileInfo_CSD::set_csd_id(int index, const std::string& value) {
  _impl_.csd_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.DataFileInfo.CSD.csd_id)
}
inline void DataFileInfo_CSD::set_csd_id(int index, std::string&& value) {
  _impl_.csd_id_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:StorageEngineInstance.DataFileInfo.CSD.csd_id)
}
inline void DataFileInfo_CSD::set_csd_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.csd_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:StorageEngineInstance.DataFileInfo.CSD.csd_id)
}
inline void DataFileInfo_CSD::set_csd_id(int index, const char* value, size_t size) {
  _impl_.csd_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StorageEngineInstance.DataFileInfo.CSD.csd_id)
}
inline std::string* DataFileInfo_CSD::_internal_add_csd_id() {
  return _impl_.csd_id_.Add();
}
inline void DataFileInfo_CSD::add_csd_id(const std::string& value) {
  _impl_.csd_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.DataFileInfo.CSD.csd_id)
}
inline void DataFileInfo_CSD::add_csd_id(std::string&& value) {
  _impl_.csd_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:StorageEngineInstance.DataFileInfo.CSD.csd_id)
}
inline void DataFileInfo_CSD::add_csd_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.csd_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:StorageEngineInstance.DataFileInfo.CSD.csd_id)
}
inline void DataFileInfo_CSD::add_csd_id(const char* value, size_t size) {
  _impl_.csd_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:StorageEngineInstance.DataFileInfo.CSD.csd_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DataFileInfo_CSD::csd_id() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.DataFileInfo.CSD.csd_id)
  return _impl_.csd_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DataFileInfo_CSD::mutable_csd_id() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.DataFileInfo.CSD.csd_id)
  return &_impl_.csd_id_;
}

// repeated bool is_primary = 2;
inline int DataFileInfo_CSD::_internal_is_primary_size() const {
  return _impl_.is_primary_.size();
}
inline int DataFileInfo_CSD::is_primary_size() const {
  return _internal_is_primary_size();
}
inline void DataFileInfo_CSD::clear_is_primary() {
  _impl_.is_primary_.Clear();
}
inline bool DataFileInfo_CSD::_internal_is_primary(int index) const {
  return _impl_.is_primary_.Get(index);
}
inline bool DataFileInfo_CSD::is_primary(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.DataFileInfo.CSD.is_primary)
  return _internal_is_primary(index);
}
inline void DataFileInfo_CSD::set_is_primary(int index, bool value) {
  _impl_.is_primary_.Set(index, value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.DataFileInfo.CSD.is_primary)
}
inline void DataFileInfo_CSD::_internal_add_is_primary(bool value) {
  _impl_.is_primary_.Add(value);
}
inline void DataFileInfo_CSD::add_is_primary(bool value) {
  _internal_add_is_primary(value);
  // @@protoc_insertion_point(field_add:StorageEngineInstance.DataFileInfo.CSD.is_primary)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
DataFileInfo_CSD::_internal_is_primary() const {
  return _impl_.is_primary_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
DataFileInfo_CSD::is_primary() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.DataFileInfo.CSD.is_primary)
  return _internal_is_primary();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
DataFileInfo_CSD::_internal_mutable_is_primary() {
  return &_impl_.is_primary_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
DataFileInfo_CSD::mutable_is_primary() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.DataFileInfo.CSD.is_primary)
  return _internal_mutable_is_primary();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DataFileInfo

// map<string, .StorageEngineInstance.DataFileInfo.CSD> sst_csd_map = 1;
inline int DataFileInfo::_internal_sst_csd_map_size() const {
  return _impl_.sst_csd_map_.size();
}
inline int DataFileInfo::sst_csd_map_size() const {
  return _internal_sst_csd_map_size();
}
inline void DataFileInfo::clear_sst_csd_map() {
  _impl_.sst_csd_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DataFileInfo_CSD >&
DataFileInfo::_internal_sst_csd_map() const {
  return _impl_.sst_csd_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DataFileInfo_CSD >&
DataFileInfo::sst_csd_map() const {
  // @@protoc_insertion_point(field_map:StorageEngineInstance.DataFileInfo.sst_csd_map)
  return _internal_sst_csd_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DataFileInfo_CSD >*
DataFileInfo::_internal_mutable_sst_csd_map() {
  return _impl_.sst_csd_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::DataFileInfo_CSD >*
DataFileInfo::mutable_sst_csd_map() {
  // @@protoc_insertion_point(field_mutable_map:StorageEngineInstance.DataFileInfo.sst_csd_map)
  return _internal_mutable_sst_csd_map();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace StorageEngineInstance

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_storage_2dmanager_2eproto
