// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lba2pba.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lba2pba_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lba2pba_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lba2pba_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lba2pba_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lba2pba_2eproto;
namespace StorageEngineInstance {
class Chunk;
struct ChunkDefaultTypeInternal;
extern ChunkDefaultTypeInternal _Chunk_default_instance_;
class LBA;
struct LBADefaultTypeInternal;
extern LBADefaultTypeInternal _LBA_default_instance_;
class LBARequest;
struct LBARequestDefaultTypeInternal;
extern LBARequestDefaultTypeInternal _LBARequest_default_instance_;
class PBA;
struct PBADefaultTypeInternal;
extern PBADefaultTypeInternal _PBA_default_instance_;
class PBAList;
struct PBAListDefaultTypeInternal;
extern PBAListDefaultTypeInternal _PBAList_default_instance_;
class PBAResponse;
struct PBAResponseDefaultTypeInternal;
extern PBAResponseDefaultTypeInternal _PBAResponse_default_instance_;
}  // namespace StorageEngineInstance
PROTOBUF_NAMESPACE_OPEN
template<> ::StorageEngineInstance::Chunk* Arena::CreateMaybeMessage<::StorageEngineInstance::Chunk>(Arena*);
template<> ::StorageEngineInstance::LBA* Arena::CreateMaybeMessage<::StorageEngineInstance::LBA>(Arena*);
template<> ::StorageEngineInstance::LBARequest* Arena::CreateMaybeMessage<::StorageEngineInstance::LBARequest>(Arena*);
template<> ::StorageEngineInstance::PBA* Arena::CreateMaybeMessage<::StorageEngineInstance::PBA>(Arena*);
template<> ::StorageEngineInstance::PBAList* Arena::CreateMaybeMessage<::StorageEngineInstance::PBAList>(Arena*);
template<> ::StorageEngineInstance::PBAResponse* Arena::CreateMaybeMessage<::StorageEngineInstance::PBAResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace StorageEngineInstance {

// ===================================================================

class Chunk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Chunk) */ {
 public:
  inline Chunk() : Chunk(nullptr) {}
  ~Chunk() override;
  explicit PROTOBUF_CONSTEXPR Chunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chunk(const Chunk& from);
  Chunk(Chunk&& from) noexcept
    : Chunk() {
    *this = ::std::move(from);
  }

  inline Chunk& operator=(const Chunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chunk& operator=(Chunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chunk* internal_default_instance() {
    return reinterpret_cast<const Chunk*>(
               &_Chunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Chunk& a, Chunk& b) {
    a.Swap(&b);
  }
  inline void Swap(Chunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Chunk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Chunk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Chunk& from) {
    Chunk::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chunk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Chunk";
  }
  protected:
  explicit Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // int64 offset = 1;
  void clear_offset();
  int64_t offset() const;
  void set_offset(int64_t value);
  private:
  int64_t _internal_offset() const;
  void _internal_set_offset(int64_t value);
  public:

  // int32 length = 2;
  void clear_length();
  int32_t length() const;
  void set_length(int32_t value);
  private:
  int32_t _internal_length() const;
  void _internal_set_length(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Chunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t offset_;
    int32_t length_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lba2pba_2eproto;
};
// -------------------------------------------------------------------

class LBA final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.LBA) */ {
 public:
  inline LBA() : LBA(nullptr) {}
  ~LBA() override;
  explicit PROTOBUF_CONSTEXPR LBA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LBA(const LBA& from);
  LBA(LBA&& from) noexcept
    : LBA() {
    *this = ::std::move(from);
  }

  inline LBA& operator=(const LBA& from) {
    CopyFrom(from);
    return *this;
  }
  inline LBA& operator=(LBA&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LBA& default_instance() {
    return *internal_default_instance();
  }
  static inline const LBA* internal_default_instance() {
    return reinterpret_cast<const LBA*>(
               &_LBA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LBA& a, LBA& b) {
    a.Swap(&b);
  }
  inline void Swap(LBA* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LBA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LBA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LBA>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LBA& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LBA& from) {
    LBA::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LBA* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.LBA";
  }
  protected:
  explicit LBA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunksFieldNumber = 2,
    kFileNameFieldNumber = 1,
  };
  // repeated .StorageEngineInstance.Chunk chunks = 2;
  int chunks_size() const;
  private:
  int _internal_chunks_size() const;
  public:
  void clear_chunks();
  ::StorageEngineInstance::Chunk* mutable_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk >*
      mutable_chunks();
  private:
  const ::StorageEngineInstance::Chunk& _internal_chunks(int index) const;
  ::StorageEngineInstance::Chunk* _internal_add_chunks();
  public:
  const ::StorageEngineInstance::Chunk& chunks(int index) const;
  ::StorageEngineInstance::Chunk* add_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk >&
      chunks() const;

  // string file_name = 1;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.LBA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk > chunks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lba2pba_2eproto;
};
// -------------------------------------------------------------------

class LBARequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.LBARequest) */ {
 public:
  inline LBARequest() : LBARequest(nullptr) {}
  ~LBARequest() override;
  explicit PROTOBUF_CONSTEXPR LBARequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LBARequest(const LBARequest& from);
  LBARequest(LBARequest&& from) noexcept
    : LBARequest() {
    *this = ::std::move(from);
  }

  inline LBARequest& operator=(const LBARequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LBARequest& operator=(LBARequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LBARequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LBARequest* internal_default_instance() {
    return reinterpret_cast<const LBARequest*>(
               &_LBARequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LBARequest& a, LBARequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LBARequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LBARequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LBARequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LBARequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LBARequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LBARequest& from) {
    LBARequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LBARequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.LBARequest";
  }
  protected:
  explicit LBARequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileLbaListFieldNumber = 1,
  };
  // repeated .StorageEngineInstance.LBA file_lba_list = 1;
  int file_lba_list_size() const;
  private:
  int _internal_file_lba_list_size() const;
  public:
  void clear_file_lba_list();
  ::StorageEngineInstance::LBA* mutable_file_lba_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::LBA >*
      mutable_file_lba_list();
  private:
  const ::StorageEngineInstance::LBA& _internal_file_lba_list(int index) const;
  ::StorageEngineInstance::LBA* _internal_add_file_lba_list();
  public:
  const ::StorageEngineInstance::LBA& file_lba_list(int index) const;
  ::StorageEngineInstance::LBA* add_file_lba_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::LBA >&
      file_lba_list() const;

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.LBARequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::LBA > file_lba_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lba2pba_2eproto;
};
// -------------------------------------------------------------------

class PBA final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.PBA) */ {
 public:
  inline PBA() : PBA(nullptr) {}
  ~PBA() override;
  explicit PROTOBUF_CONSTEXPR PBA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBA(const PBA& from);
  PBA(PBA&& from) noexcept
    : PBA() {
    *this = ::std::move(from);
  }

  inline PBA& operator=(const PBA& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBA& operator=(PBA&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBA& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBA* internal_default_instance() {
    return reinterpret_cast<const PBA*>(
               &_PBA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PBA& a, PBA& b) {
    a.Swap(&b);
  }
  inline void Swap(PBA* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBA>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBA& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBA& from) {
    PBA::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBA* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.PBA";
  }
  protected:
  explicit PBA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunksFieldNumber = 2,
    kCsdIdFieldNumber = 1,
  };
  // repeated .StorageEngineInstance.Chunk chunks = 2;
  int chunks_size() const;
  private:
  int _internal_chunks_size() const;
  public:
  void clear_chunks();
  ::StorageEngineInstance::Chunk* mutable_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk >*
      mutable_chunks();
  private:
  const ::StorageEngineInstance::Chunk& _internal_chunks(int index) const;
  ::StorageEngineInstance::Chunk* _internal_add_chunks();
  public:
  const ::StorageEngineInstance::Chunk& chunks(int index) const;
  ::StorageEngineInstance::Chunk* add_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk >&
      chunks() const;

  // string csd_id = 1;
  void clear_csd_id();
  const std::string& csd_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_csd_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_csd_id();
  PROTOBUF_NODISCARD std::string* release_csd_id();
  void set_allocated_csd_id(std::string* csd_id);
  private:
  const std::string& _internal_csd_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_csd_id(const std::string& value);
  std::string* _internal_mutable_csd_id();
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.PBA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk > chunks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr csd_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lba2pba_2eproto;
};
// -------------------------------------------------------------------

class PBAList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.PBAList) */ {
 public:
  inline PBAList() : PBAList(nullptr) {}
  ~PBAList() override;
  explicit PROTOBUF_CONSTEXPR PBAList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBAList(const PBAList& from);
  PBAList(PBAList&& from) noexcept
    : PBAList() {
    *this = ::std::move(from);
  }

  inline PBAList& operator=(const PBAList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBAList& operator=(PBAList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBAList& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBAList* internal_default_instance() {
    return reinterpret_cast<const PBAList*>(
               &_PBAList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PBAList& a, PBAList& b) {
    a.Swap(&b);
  }
  inline void Swap(PBAList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBAList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBAList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBAList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBAList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBAList& from) {
    PBAList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBAList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.PBAList";
  }
  protected:
  explicit PBAList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCsdPbaListFieldNumber = 2,
    kFileNameFieldNumber = 1,
  };
  // repeated .StorageEngineInstance.PBA csd_pba_list = 2;
  int csd_pba_list_size() const;
  private:
  int _internal_csd_pba_list_size() const;
  public:
  void clear_csd_pba_list();
  ::StorageEngineInstance::PBA* mutable_csd_pba_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::PBA >*
      mutable_csd_pba_list();
  private:
  const ::StorageEngineInstance::PBA& _internal_csd_pba_list(int index) const;
  ::StorageEngineInstance::PBA* _internal_add_csd_pba_list();
  public:
  const ::StorageEngineInstance::PBA& csd_pba_list(int index) const;
  ::StorageEngineInstance::PBA* add_csd_pba_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::PBA >&
      csd_pba_list() const;

  // string file_name = 1;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.PBAList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::PBA > csd_pba_list_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lba2pba_2eproto;
};
// -------------------------------------------------------------------

class PBAResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.PBAResponse) */ {
 public:
  inline PBAResponse() : PBAResponse(nullptr) {}
  ~PBAResponse() override;
  explicit PROTOBUF_CONSTEXPR PBAResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBAResponse(const PBAResponse& from);
  PBAResponse(PBAResponse&& from) noexcept
    : PBAResponse() {
    *this = ::std::move(from);
  }

  inline PBAResponse& operator=(const PBAResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBAResponse& operator=(PBAResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBAResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBAResponse* internal_default_instance() {
    return reinterpret_cast<const PBAResponse*>(
               &_PBAResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PBAResponse& a, PBAResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PBAResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBAResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBAResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBAResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBAResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBAResponse& from) {
    PBAResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBAResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.PBAResponse";
  }
  protected:
  explicit PBAResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileCsdListFieldNumber = 1,
  };
  // repeated .StorageEngineInstance.PBAList file_csd_list = 1;
  int file_csd_list_size() const;
  private:
  int _internal_file_csd_list_size() const;
  public:
  void clear_file_csd_list();
  ::StorageEngineInstance::PBAList* mutable_file_csd_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::PBAList >*
      mutable_file_csd_list();
  private:
  const ::StorageEngineInstance::PBAList& _internal_file_csd_list(int index) const;
  ::StorageEngineInstance::PBAList* _internal_add_file_csd_list();
  public:
  const ::StorageEngineInstance::PBAList& file_csd_list(int index) const;
  ::StorageEngineInstance::PBAList* add_file_csd_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::PBAList >&
      file_csd_list() const;

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.PBAResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::PBAList > file_csd_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lba2pba_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Chunk

// int64 offset = 1;
inline void Chunk::clear_offset() {
  _impl_.offset_ = int64_t{0};
}
inline int64_t Chunk::_internal_offset() const {
  return _impl_.offset_;
}
inline int64_t Chunk::offset() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Chunk.offset)
  return _internal_offset();
}
inline void Chunk::_internal_set_offset(int64_t value) {
  
  _impl_.offset_ = value;
}
inline void Chunk::set_offset(int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Chunk.offset)
}

// int32 length = 2;
inline void Chunk::clear_length() {
  _impl_.length_ = 0;
}
inline int32_t Chunk::_internal_length() const {
  return _impl_.length_;
}
inline int32_t Chunk::length() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Chunk.length)
  return _internal_length();
}
inline void Chunk::_internal_set_length(int32_t value) {
  
  _impl_.length_ = value;
}
inline void Chunk::set_length(int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Chunk.length)
}

// -------------------------------------------------------------------

// LBA

// string file_name = 1;
inline void LBA::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& LBA::file_name() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.LBA.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LBA::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.LBA.file_name)
}
inline std::string* LBA::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.LBA.file_name)
  return _s;
}
inline const std::string& LBA::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void LBA::_internal_set_file_name(const std::string& value) {
  
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LBA::_internal_mutable_file_name() {
  
  return _impl_.file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LBA::release_file_name() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.LBA.file_name)
  return _impl_.file_name_.Release();
}
inline void LBA::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  _impl_.file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.LBA.file_name)
}

// repeated .StorageEngineInstance.Chunk chunks = 2;
inline int LBA::_internal_chunks_size() const {
  return _impl_.chunks_.size();
}
inline int LBA::chunks_size() const {
  return _internal_chunks_size();
}
inline void LBA::clear_chunks() {
  _impl_.chunks_.Clear();
}
inline ::StorageEngineInstance::Chunk* LBA::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.LBA.chunks)
  return _impl_.chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk >*
LBA::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.LBA.chunks)
  return &_impl_.chunks_;
}
inline const ::StorageEngineInstance::Chunk& LBA::_internal_chunks(int index) const {
  return _impl_.chunks_.Get(index);
}
inline const ::StorageEngineInstance::Chunk& LBA::chunks(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.LBA.chunks)
  return _internal_chunks(index);
}
inline ::StorageEngineInstance::Chunk* LBA::_internal_add_chunks() {
  return _impl_.chunks_.Add();
}
inline ::StorageEngineInstance::Chunk* LBA::add_chunks() {
  ::StorageEngineInstance::Chunk* _add = _internal_add_chunks();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.LBA.chunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk >&
LBA::chunks() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.LBA.chunks)
  return _impl_.chunks_;
}

// -------------------------------------------------------------------

// LBARequest

// repeated .StorageEngineInstance.LBA file_lba_list = 1;
inline int LBARequest::_internal_file_lba_list_size() const {
  return _impl_.file_lba_list_.size();
}
inline int LBARequest::file_lba_list_size() const {
  return _internal_file_lba_list_size();
}
inline void LBARequest::clear_file_lba_list() {
  _impl_.file_lba_list_.Clear();
}
inline ::StorageEngineInstance::LBA* LBARequest::mutable_file_lba_list(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.LBARequest.file_lba_list)
  return _impl_.file_lba_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::LBA >*
LBARequest::mutable_file_lba_list() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.LBARequest.file_lba_list)
  return &_impl_.file_lba_list_;
}
inline const ::StorageEngineInstance::LBA& LBARequest::_internal_file_lba_list(int index) const {
  return _impl_.file_lba_list_.Get(index);
}
inline const ::StorageEngineInstance::LBA& LBARequest::file_lba_list(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.LBARequest.file_lba_list)
  return _internal_file_lba_list(index);
}
inline ::StorageEngineInstance::LBA* LBARequest::_internal_add_file_lba_list() {
  return _impl_.file_lba_list_.Add();
}
inline ::StorageEngineInstance::LBA* LBARequest::add_file_lba_list() {
  ::StorageEngineInstance::LBA* _add = _internal_add_file_lba_list();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.LBARequest.file_lba_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::LBA >&
LBARequest::file_lba_list() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.LBARequest.file_lba_list)
  return _impl_.file_lba_list_;
}

// -------------------------------------------------------------------

// PBA

// string csd_id = 1;
inline void PBA::clear_csd_id() {
  _impl_.csd_id_.ClearToEmpty();
}
inline const std::string& PBA::csd_id() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.PBA.csd_id)
  return _internal_csd_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBA::set_csd_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.csd_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.PBA.csd_id)
}
inline std::string* PBA::mutable_csd_id() {
  std::string* _s = _internal_mutable_csd_id();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.PBA.csd_id)
  return _s;
}
inline const std::string& PBA::_internal_csd_id() const {
  return _impl_.csd_id_.Get();
}
inline void PBA::_internal_set_csd_id(const std::string& value) {
  
  _impl_.csd_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PBA::_internal_mutable_csd_id() {
  
  return _impl_.csd_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PBA::release_csd_id() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.PBA.csd_id)
  return _impl_.csd_id_.Release();
}
inline void PBA::set_allocated_csd_id(std::string* csd_id) {
  if (csd_id != nullptr) {
    
  } else {
    
  }
  _impl_.csd_id_.SetAllocated(csd_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.csd_id_.IsDefault()) {
    _impl_.csd_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.PBA.csd_id)
}

// repeated .StorageEngineInstance.Chunk chunks = 2;
inline int PBA::_internal_chunks_size() const {
  return _impl_.chunks_.size();
}
inline int PBA::chunks_size() const {
  return _internal_chunks_size();
}
inline void PBA::clear_chunks() {
  _impl_.chunks_.Clear();
}
inline ::StorageEngineInstance::Chunk* PBA::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.PBA.chunks)
  return _impl_.chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk >*
PBA::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.PBA.chunks)
  return &_impl_.chunks_;
}
inline const ::StorageEngineInstance::Chunk& PBA::_internal_chunks(int index) const {
  return _impl_.chunks_.Get(index);
}
inline const ::StorageEngineInstance::Chunk& PBA::chunks(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.PBA.chunks)
  return _internal_chunks(index);
}
inline ::StorageEngineInstance::Chunk* PBA::_internal_add_chunks() {
  return _impl_.chunks_.Add();
}
inline ::StorageEngineInstance::Chunk* PBA::add_chunks() {
  ::StorageEngineInstance::Chunk* _add = _internal_add_chunks();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.PBA.chunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk >&
PBA::chunks() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.PBA.chunks)
  return _impl_.chunks_;
}

// -------------------------------------------------------------------

// PBAList

// string file_name = 1;
inline void PBAList::clear_file_name() {
  _impl_.file_name_.ClearToEmpty();
}
inline const std::string& PBAList::file_name() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.PBAList.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PBAList::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.PBAList.file_name)
}
inline std::string* PBAList::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.PBAList.file_name)
  return _s;
}
inline const std::string& PBAList::_internal_file_name() const {
  return _impl_.file_name_.Get();
}
inline void PBAList::_internal_set_file_name(const std::string& value) {
  
  _impl_.file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PBAList::_internal_mutable_file_name() {
  
  return _impl_.file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PBAList::release_file_name() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.PBAList.file_name)
  return _impl_.file_name_.Release();
}
inline void PBAList::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  _impl_.file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_name_.IsDefault()) {
    _impl_.file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.PBAList.file_name)
}

// repeated .StorageEngineInstance.PBA csd_pba_list = 2;
inline int PBAList::_internal_csd_pba_list_size() const {
  return _impl_.csd_pba_list_.size();
}
inline int PBAList::csd_pba_list_size() const {
  return _internal_csd_pba_list_size();
}
inline void PBAList::clear_csd_pba_list() {
  _impl_.csd_pba_list_.Clear();
}
inline ::StorageEngineInstance::PBA* PBAList::mutable_csd_pba_list(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.PBAList.csd_pba_list)
  return _impl_.csd_pba_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::PBA >*
PBAList::mutable_csd_pba_list() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.PBAList.csd_pba_list)
  return &_impl_.csd_pba_list_;
}
inline const ::StorageEngineInstance::PBA& PBAList::_internal_csd_pba_list(int index) const {
  return _impl_.csd_pba_list_.Get(index);
}
inline const ::StorageEngineInstance::PBA& PBAList::csd_pba_list(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.PBAList.csd_pba_list)
  return _internal_csd_pba_list(index);
}
inline ::StorageEngineInstance::PBA* PBAList::_internal_add_csd_pba_list() {
  return _impl_.csd_pba_list_.Add();
}
inline ::StorageEngineInstance::PBA* PBAList::add_csd_pba_list() {
  ::StorageEngineInstance::PBA* _add = _internal_add_csd_pba_list();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.PBAList.csd_pba_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::PBA >&
PBAList::csd_pba_list() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.PBAList.csd_pba_list)
  return _impl_.csd_pba_list_;
}

// -------------------------------------------------------------------

// PBAResponse

// repeated .StorageEngineInstance.PBAList file_csd_list = 1;
inline int PBAResponse::_internal_file_csd_list_size() const {
  return _impl_.file_csd_list_.size();
}
inline int PBAResponse::file_csd_list_size() const {
  return _internal_file_csd_list_size();
}
inline void PBAResponse::clear_file_csd_list() {
  _impl_.file_csd_list_.Clear();
}
inline ::StorageEngineInstance::PBAList* PBAResponse::mutable_file_csd_list(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.PBAResponse.file_csd_list)
  return _impl_.file_csd_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::PBAList >*
PBAResponse::mutable_file_csd_list() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.PBAResponse.file_csd_list)
  return &_impl_.file_csd_list_;
}
inline const ::StorageEngineInstance::PBAList& PBAResponse::_internal_file_csd_list(int index) const {
  return _impl_.file_csd_list_.Get(index);
}
inline const ::StorageEngineInstance::PBAList& PBAResponse::file_csd_list(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.PBAResponse.file_csd_list)
  return _internal_file_csd_list(index);
}
inline ::StorageEngineInstance::PBAList* PBAResponse::_internal_add_file_csd_list() {
  return _impl_.file_csd_list_.Add();
}
inline ::StorageEngineInstance::PBAList* PBAResponse::add_file_csd_list() {
  ::StorageEngineInstance::PBAList* _add = _internal_add_file_csd_list();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.PBAResponse.file_csd_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::PBAList >&
PBAResponse::file_csd_list() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.PBAResponse.file_csd_list)
  return _impl_.file_csd_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace StorageEngineInstance

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lba2pba_2eproto
