// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wal_manager.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_wal_5fmanager_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_wal_5fmanager_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_wal_5fmanager_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_wal_5fmanager_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_wal_5fmanager_2eproto;
namespace wal_manager {
class Column;
struct ColumnDefaultTypeInternal;
extern ColumnDefaultTypeInternal _Column_default_instance_;
class Wal;
struct WalDefaultTypeInternal;
extern WalDefaultTypeInternal _Wal_default_instance_;
class query_req;
struct query_reqDefaultTypeInternal;
extern query_reqDefaultTypeInternal _query_req_default_instance_;
class query_res;
struct query_resDefaultTypeInternal;
extern query_resDefaultTypeInternal _query_res_default_instance_;
}  // namespace wal_manager
PROTOBUF_NAMESPACE_OPEN
template<> ::wal_manager::Column* Arena::CreateMaybeMessage<::wal_manager::Column>(Arena*);
template<> ::wal_manager::Wal* Arena::CreateMaybeMessage<::wal_manager::Wal>(Arena*);
template<> ::wal_manager::query_req* Arena::CreateMaybeMessage<::wal_manager::query_req>(Arena*);
template<> ::wal_manager::query_res* Arena::CreateMaybeMessage<::wal_manager::query_res>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wal_manager {

// ===================================================================

class query_req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wal_manager.query_req) */ {
 public:
  inline query_req() : query_req(nullptr) {}
  ~query_req() override;
  explicit constexpr query_req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  query_req(const query_req& from);
  query_req(query_req&& from) noexcept
    : query_req() {
    *this = ::std::move(from);
  }

  inline query_req& operator=(const query_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline query_req& operator=(query_req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const query_req& default_instance() {
    return *internal_default_instance();
  }
  static inline const query_req* internal_default_instance() {
    return reinterpret_cast<const query_req*>(
               &_query_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(query_req& a, query_req& b) {
    a.Swap(&b);
  }
  inline void Swap(query_req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(query_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  query_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<query_req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const query_req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const query_req& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(query_req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wal_manager.query_req";
  }
  protected:
  explicit query_req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kTypeFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:wal_manager.query_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wal_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class Column final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wal_manager.Column) */ {
 public:
  inline Column() : Column(nullptr) {}
  ~Column() override;
  explicit constexpr Column(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Column(const Column& from);
  Column(Column&& from) noexcept
    : Column() {
    *this = ::std::move(from);
  }

  inline Column& operator=(const Column& from) {
    CopyFrom(from);
    return *this;
  }
  inline Column& operator=(Column&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Column& default_instance() {
    return *internal_default_instance();
  }
  static inline const Column* internal_default_instance() {
    return reinterpret_cast<const Column*>(
               &_Column_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Column& a, Column& b) {
    a.Swap(&b);
  }
  inline void Swap(Column* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Column* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Column* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Column>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Column& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Column& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Column* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wal_manager.Column";
  }
  protected:
  explicit Column(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnFieldNumber = 1,
    kDatatypeFieldNumber = 2,
    kCtypeFieldNumber = 3,
    kValueFieldNumber = 6,
    kClenFieldNumber = 4,
    kPrecisionFieldNumber = 5,
  };
  // string column = 1;
  void clear_column();
  const std::string& column() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_column(ArgT0&& arg0, ArgT... args);
  std::string* mutable_column();
  PROTOBUF_NODISCARD std::string* release_column();
  void set_allocated_column(std::string* column);
  private:
  const std::string& _internal_column() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_column(const std::string& value);
  std::string* _internal_mutable_column();
  public:

  // string datatype = 2;
  void clear_datatype();
  const std::string& datatype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_datatype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_datatype();
  PROTOBUF_NODISCARD std::string* release_datatype();
  void set_allocated_datatype(std::string* datatype);
  private:
  const std::string& _internal_datatype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_datatype(const std::string& value);
  std::string* _internal_mutable_datatype();
  public:

  // string ctype = 3;
  void clear_ctype();
  const std::string& ctype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ctype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ctype();
  PROTOBUF_NODISCARD std::string* release_ctype();
  void set_allocated_ctype(std::string* ctype);
  private:
  const std::string& _internal_ctype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ctype(const std::string& value);
  std::string* _internal_mutable_ctype();
  public:

  // string value = 6;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 clen = 4;
  void clear_clen();
  int32_t clen() const;
  void set_clen(int32_t value);
  private:
  int32_t _internal_clen() const;
  void _internal_set_clen(int32_t value);
  public:

  // int32 precision = 5;
  void clear_precision();
  int32_t precision() const;
  void set_precision(int32_t value);
  private:
  int32_t _internal_precision() const;
  void _internal_set_precision(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:wal_manager.Column)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr column_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datatype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ctype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int32_t clen_;
  int32_t precision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wal_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class Wal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wal_manager.Wal) */ {
 public:
  inline Wal() : Wal(nullptr) {}
  ~Wal() override;
  explicit constexpr Wal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Wal(const Wal& from);
  Wal(Wal&& from) noexcept
    : Wal() {
    *this = ::std::move(from);
  }

  inline Wal& operator=(const Wal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Wal& operator=(Wal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Wal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Wal* internal_default_instance() {
    return reinterpret_cast<const Wal*>(
               &_Wal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Wal& a, Wal& b) {
    a.Swap(&b);
  }
  inline void Swap(Wal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Wal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Wal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Wal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Wal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Wal& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Wal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wal_manager.Wal";
  }
  protected:
  explicit Wal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnListFieldNumber = 3,
    kTableNameFieldNumber = 1,
    kIndexValFieldNumber = 2,
  };
  // repeated .wal_manager.Column column_list = 3;
  int column_list_size() const;
  private:
  int _internal_column_list_size() const;
  public:
  void clear_column_list();
  ::wal_manager::Column* mutable_column_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wal_manager::Column >*
      mutable_column_list();
  private:
  const ::wal_manager::Column& _internal_column_list(int index) const;
  ::wal_manager::Column* _internal_add_column_list();
  public:
  const ::wal_manager::Column& column_list(int index) const;
  ::wal_manager::Column* add_column_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wal_manager::Column >&
      column_list() const;

  // string table_name = 1;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // string index_val = 2;
  void clear_index_val();
  const std::string& index_val() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_val(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_val();
  PROTOBUF_NODISCARD std::string* release_index_val();
  void set_allocated_index_val(std::string* index_val);
  private:
  const std::string& _internal_index_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_val(const std::string& value);
  std::string* _internal_mutable_index_val();
  public:

  // @@protoc_insertion_point(class_scope:wal_manager.Wal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wal_manager::Column > column_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wal_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class query_res final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wal_manager.query_res) */ {
 public:
  inline query_res() : query_res(nullptr) {}
  ~query_res() override;
  explicit constexpr query_res(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  query_res(const query_res& from);
  query_res(query_res&& from) noexcept
    : query_res() {
    *this = ::std::move(from);
  }

  inline query_res& operator=(const query_res& from) {
    CopyFrom(from);
    return *this;
  }
  inline query_res& operator=(query_res&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const query_res& default_instance() {
    return *internal_default_instance();
  }
  static inline const query_res* internal_default_instance() {
    return reinterpret_cast<const query_res*>(
               &_query_res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(query_res& a, query_res& b) {
    a.Swap(&b);
  }
  inline void Swap(query_res* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(query_res* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  query_res* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<query_res>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const query_res& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const query_res& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(query_res* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wal_manager.query_res";
  }
  protected:
  explicit query_res(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWalListFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated .wal_manager.Wal wal_list = 2;
  int wal_list_size() const;
  private:
  int _internal_wal_list_size() const;
  public:
  void clear_wal_list();
  ::wal_manager::Wal* mutable_wal_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wal_manager::Wal >*
      mutable_wal_list();
  private:
  const ::wal_manager::Wal& _internal_wal_list(int index) const;
  ::wal_manager::Wal* _internal_add_wal_list();
  public:
  const ::wal_manager::Wal& wal_list(int index) const;
  ::wal_manager::Wal* add_wal_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wal_manager::Wal >&
      wal_list() const;

  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:wal_manager.query_res)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wal_manager::Wal > wal_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wal_5fmanager_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// query_req

// string key = 1;
inline void query_req::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& query_req::key() const {
  // @@protoc_insertion_point(field_get:wal_manager.query_req.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void query_req::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wal_manager.query_req.key)
}
inline std::string* query_req::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:wal_manager.query_req.key)
  return _s;
}
inline const std::string& query_req::_internal_key() const {
  return key_.Get();
}
inline void query_req::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* query_req::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* query_req::release_key() {
  // @@protoc_insertion_point(field_release:wal_manager.query_req.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void query_req::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wal_manager.query_req.key)
}

// string type = 2;
inline void query_req::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& query_req::type() const {
  // @@protoc_insertion_point(field_get:wal_manager.query_req.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void query_req::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wal_manager.query_req.type)
}
inline std::string* query_req::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:wal_manager.query_req.type)
  return _s;
}
inline const std::string& query_req::_internal_type() const {
  return type_.Get();
}
inline void query_req::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* query_req::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* query_req::release_type() {
  // @@protoc_insertion_point(field_release:wal_manager.query_req.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void query_req::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wal_manager.query_req.type)
}

// string value = 3;
inline void query_req::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& query_req::value() const {
  // @@protoc_insertion_point(field_get:wal_manager.query_req.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void query_req::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wal_manager.query_req.value)
}
inline std::string* query_req::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:wal_manager.query_req.value)
  return _s;
}
inline const std::string& query_req::_internal_value() const {
  return value_.Get();
}
inline void query_req::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* query_req::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* query_req::release_value() {
  // @@protoc_insertion_point(field_release:wal_manager.query_req.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void query_req::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wal_manager.query_req.value)
}

// -------------------------------------------------------------------

// Column

// string column = 1;
inline void Column::clear_column() {
  column_.ClearToEmpty();
}
inline const std::string& Column::column() const {
  // @@protoc_insertion_point(field_get:wal_manager.Column.column)
  return _internal_column();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Column::set_column(ArgT0&& arg0, ArgT... args) {
 
 column_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wal_manager.Column.column)
}
inline std::string* Column::mutable_column() {
  std::string* _s = _internal_mutable_column();
  // @@protoc_insertion_point(field_mutable:wal_manager.Column.column)
  return _s;
}
inline const std::string& Column::_internal_column() const {
  return column_.Get();
}
inline void Column::_internal_set_column(const std::string& value) {
  
  column_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Column::_internal_mutable_column() {
  
  return column_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Column::release_column() {
  // @@protoc_insertion_point(field_release:wal_manager.Column.column)
  return column_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Column::set_allocated_column(std::string* column) {
  if (column != nullptr) {
    
  } else {
    
  }
  column_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), column,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (column_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    column_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wal_manager.Column.column)
}

// string datatype = 2;
inline void Column::clear_datatype() {
  datatype_.ClearToEmpty();
}
inline const std::string& Column::datatype() const {
  // @@protoc_insertion_point(field_get:wal_manager.Column.datatype)
  return _internal_datatype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Column::set_datatype(ArgT0&& arg0, ArgT... args) {
 
 datatype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wal_manager.Column.datatype)
}
inline std::string* Column::mutable_datatype() {
  std::string* _s = _internal_mutable_datatype();
  // @@protoc_insertion_point(field_mutable:wal_manager.Column.datatype)
  return _s;
}
inline const std::string& Column::_internal_datatype() const {
  return datatype_.Get();
}
inline void Column::_internal_set_datatype(const std::string& value) {
  
  datatype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Column::_internal_mutable_datatype() {
  
  return datatype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Column::release_datatype() {
  // @@protoc_insertion_point(field_release:wal_manager.Column.datatype)
  return datatype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Column::set_allocated_datatype(std::string* datatype) {
  if (datatype != nullptr) {
    
  } else {
    
  }
  datatype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datatype,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (datatype_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    datatype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wal_manager.Column.datatype)
}

// string ctype = 3;
inline void Column::clear_ctype() {
  ctype_.ClearToEmpty();
}
inline const std::string& Column::ctype() const {
  // @@protoc_insertion_point(field_get:wal_manager.Column.ctype)
  return _internal_ctype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Column::set_ctype(ArgT0&& arg0, ArgT... args) {
 
 ctype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wal_manager.Column.ctype)
}
inline std::string* Column::mutable_ctype() {
  std::string* _s = _internal_mutable_ctype();
  // @@protoc_insertion_point(field_mutable:wal_manager.Column.ctype)
  return _s;
}
inline const std::string& Column::_internal_ctype() const {
  return ctype_.Get();
}
inline void Column::_internal_set_ctype(const std::string& value) {
  
  ctype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Column::_internal_mutable_ctype() {
  
  return ctype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Column::release_ctype() {
  // @@protoc_insertion_point(field_release:wal_manager.Column.ctype)
  return ctype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Column::set_allocated_ctype(std::string* ctype) {
  if (ctype != nullptr) {
    
  } else {
    
  }
  ctype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ctype,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ctype_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ctype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wal_manager.Column.ctype)
}

// int32 clen = 4;
inline void Column::clear_clen() {
  clen_ = 0;
}
inline int32_t Column::_internal_clen() const {
  return clen_;
}
inline int32_t Column::clen() const {
  // @@protoc_insertion_point(field_get:wal_manager.Column.clen)
  return _internal_clen();
}
inline void Column::_internal_set_clen(int32_t value) {
  
  clen_ = value;
}
inline void Column::set_clen(int32_t value) {
  _internal_set_clen(value);
  // @@protoc_insertion_point(field_set:wal_manager.Column.clen)
}

// int32 precision = 5;
inline void Column::clear_precision() {
  precision_ = 0;
}
inline int32_t Column::_internal_precision() const {
  return precision_;
}
inline int32_t Column::precision() const {
  // @@protoc_insertion_point(field_get:wal_manager.Column.precision)
  return _internal_precision();
}
inline void Column::_internal_set_precision(int32_t value) {
  
  precision_ = value;
}
inline void Column::set_precision(int32_t value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:wal_manager.Column.precision)
}

// string value = 6;
inline void Column::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Column::value() const {
  // @@protoc_insertion_point(field_get:wal_manager.Column.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Column::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wal_manager.Column.value)
}
inline std::string* Column::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:wal_manager.Column.value)
  return _s;
}
inline const std::string& Column::_internal_value() const {
  return value_.Get();
}
inline void Column::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Column::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Column::release_value() {
  // @@protoc_insertion_point(field_release:wal_manager.Column.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Column::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wal_manager.Column.value)
}

// -------------------------------------------------------------------

// Wal

// string table_name = 1;
inline void Wal::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& Wal::table_name() const {
  // @@protoc_insertion_point(field_get:wal_manager.Wal.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Wal::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wal_manager.Wal.table_name)
}
inline std::string* Wal::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:wal_manager.Wal.table_name)
  return _s;
}
inline const std::string& Wal::_internal_table_name() const {
  return table_name_.Get();
}
inline void Wal::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Wal::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Wal::release_table_name() {
  // @@protoc_insertion_point(field_release:wal_manager.Wal.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Wal::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wal_manager.Wal.table_name)
}

// string index_val = 2;
inline void Wal::clear_index_val() {
  index_val_.ClearToEmpty();
}
inline const std::string& Wal::index_val() const {
  // @@protoc_insertion_point(field_get:wal_manager.Wal.index_val)
  return _internal_index_val();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Wal::set_index_val(ArgT0&& arg0, ArgT... args) {
 
 index_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wal_manager.Wal.index_val)
}
inline std::string* Wal::mutable_index_val() {
  std::string* _s = _internal_mutable_index_val();
  // @@protoc_insertion_point(field_mutable:wal_manager.Wal.index_val)
  return _s;
}
inline const std::string& Wal::_internal_index_val() const {
  return index_val_.Get();
}
inline void Wal::_internal_set_index_val(const std::string& value) {
  
  index_val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Wal::_internal_mutable_index_val() {
  
  return index_val_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Wal::release_index_val() {
  // @@protoc_insertion_point(field_release:wal_manager.Wal.index_val)
  return index_val_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Wal::set_allocated_index_val(std::string* index_val) {
  if (index_val != nullptr) {
    
  } else {
    
  }
  index_val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index_val,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (index_val_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    index_val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wal_manager.Wal.index_val)
}

// repeated .wal_manager.Column column_list = 3;
inline int Wal::_internal_column_list_size() const {
  return column_list_.size();
}
inline int Wal::column_list_size() const {
  return _internal_column_list_size();
}
inline void Wal::clear_column_list() {
  column_list_.Clear();
}
inline ::wal_manager::Column* Wal::mutable_column_list(int index) {
  // @@protoc_insertion_point(field_mutable:wal_manager.Wal.column_list)
  return column_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wal_manager::Column >*
Wal::mutable_column_list() {
  // @@protoc_insertion_point(field_mutable_list:wal_manager.Wal.column_list)
  return &column_list_;
}
inline const ::wal_manager::Column& Wal::_internal_column_list(int index) const {
  return column_list_.Get(index);
}
inline const ::wal_manager::Column& Wal::column_list(int index) const {
  // @@protoc_insertion_point(field_get:wal_manager.Wal.column_list)
  return _internal_column_list(index);
}
inline ::wal_manager::Column* Wal::_internal_add_column_list() {
  return column_list_.Add();
}
inline ::wal_manager::Column* Wal::add_column_list() {
  ::wal_manager::Column* _add = _internal_add_column_list();
  // @@protoc_insertion_point(field_add:wal_manager.Wal.column_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wal_manager::Column >&
Wal::column_list() const {
  // @@protoc_insertion_point(field_list:wal_manager.Wal.column_list)
  return column_list_;
}

// -------------------------------------------------------------------

// query_res

// string key = 1;
inline void query_res::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& query_res::key() const {
  // @@protoc_insertion_point(field_get:wal_manager.query_res.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void query_res::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wal_manager.query_res.key)
}
inline std::string* query_res::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:wal_manager.query_res.key)
  return _s;
}
inline const std::string& query_res::_internal_key() const {
  return key_.Get();
}
inline void query_res::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* query_res::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* query_res::release_key() {
  // @@protoc_insertion_point(field_release:wal_manager.query_res.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void query_res::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wal_manager.query_res.key)
}

// repeated .wal_manager.Wal wal_list = 2;
inline int query_res::_internal_wal_list_size() const {
  return wal_list_.size();
}
inline int query_res::wal_list_size() const {
  return _internal_wal_list_size();
}
inline void query_res::clear_wal_list() {
  wal_list_.Clear();
}
inline ::wal_manager::Wal* query_res::mutable_wal_list(int index) {
  // @@protoc_insertion_point(field_mutable:wal_manager.query_res.wal_list)
  return wal_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wal_manager::Wal >*
query_res::mutable_wal_list() {
  // @@protoc_insertion_point(field_mutable_list:wal_manager.query_res.wal_list)
  return &wal_list_;
}
inline const ::wal_manager::Wal& query_res::_internal_wal_list(int index) const {
  return wal_list_.Get(index);
}
inline const ::wal_manager::Wal& query_res::wal_list(int index) const {
  // @@protoc_insertion_point(field_get:wal_manager.query_res.wal_list)
  return _internal_wal_list(index);
}
inline ::wal_manager::Wal* query_res::_internal_add_wal_list() {
  return wal_list_.Add();
}
inline ::wal_manager::Wal* query_res::add_wal_list() {
  ::wal_manager::Wal* _add = _internal_add_wal_list();
  // @@protoc_insertion_point(field_add:wal_manager.query_res.wal_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wal_manager::Wal >&
query_res::wal_list() const {
  // @@protoc_insertion_point(field_list:wal_manager.query_res.wal_list)
  return wal_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace wal_manager

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_wal_5fmanager_2eproto
