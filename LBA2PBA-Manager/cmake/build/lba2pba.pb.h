// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lba2pba.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lba2pba_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lba2pba_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lba2pba_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lba2pba_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lba2pba_2eproto;
namespace StorageEngineInstance {
class Chunk;
struct ChunkDefaultTypeInternal;
extern ChunkDefaultTypeInternal _Chunk_default_instance_;
class LBARequest;
struct LBARequestDefaultTypeInternal;
extern LBARequestDefaultTypeInternal _LBARequest_default_instance_;
class LBARequest_LBA;
struct LBARequest_LBADefaultTypeInternal;
extern LBARequest_LBADefaultTypeInternal _LBARequest_LBA_default_instance_;
class PBAResponse;
struct PBAResponseDefaultTypeInternal;
extern PBAResponseDefaultTypeInternal _PBAResponse_default_instance_;
class PBAResponse_PBA;
struct PBAResponse_PBADefaultTypeInternal;
extern PBAResponse_PBADefaultTypeInternal _PBAResponse_PBA_default_instance_;
class PBAResponse_PbaChunksEntry_DoNotUse;
struct PBAResponse_PbaChunksEntry_DoNotUseDefaultTypeInternal;
extern PBAResponse_PbaChunksEntry_DoNotUseDefaultTypeInternal _PBAResponse_PbaChunksEntry_DoNotUse_default_instance_;
}  // namespace StorageEngineInstance
PROTOBUF_NAMESPACE_OPEN
template<> ::StorageEngineInstance::Chunk* Arena::CreateMaybeMessage<::StorageEngineInstance::Chunk>(Arena*);
template<> ::StorageEngineInstance::LBARequest* Arena::CreateMaybeMessage<::StorageEngineInstance::LBARequest>(Arena*);
template<> ::StorageEngineInstance::LBARequest_LBA* Arena::CreateMaybeMessage<::StorageEngineInstance::LBARequest_LBA>(Arena*);
template<> ::StorageEngineInstance::PBAResponse* Arena::CreateMaybeMessage<::StorageEngineInstance::PBAResponse>(Arena*);
template<> ::StorageEngineInstance::PBAResponse_PBA* Arena::CreateMaybeMessage<::StorageEngineInstance::PBAResponse_PBA>(Arena*);
template<> ::StorageEngineInstance::PBAResponse_PbaChunksEntry_DoNotUse* Arena::CreateMaybeMessage<::StorageEngineInstance::PBAResponse_PbaChunksEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace StorageEngineInstance {

// ===================================================================

class LBARequest_LBA final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.LBARequest.LBA) */ {
 public:
  inline LBARequest_LBA() : LBARequest_LBA(nullptr) {}
  ~LBARequest_LBA() override;
  explicit PROTOBUF_CONSTEXPR LBARequest_LBA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LBARequest_LBA(const LBARequest_LBA& from);
  LBARequest_LBA(LBARequest_LBA&& from) noexcept
    : LBARequest_LBA() {
    *this = ::std::move(from);
  }

  inline LBARequest_LBA& operator=(const LBARequest_LBA& from) {
    CopyFrom(from);
    return *this;
  }
  inline LBARequest_LBA& operator=(LBARequest_LBA&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LBARequest_LBA& default_instance() {
    return *internal_default_instance();
  }
  static inline const LBARequest_LBA* internal_default_instance() {
    return reinterpret_cast<const LBARequest_LBA*>(
               &_LBARequest_LBA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LBARequest_LBA& a, LBARequest_LBA& b) {
    a.Swap(&b);
  }
  inline void Swap(LBARequest_LBA* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LBARequest_LBA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LBARequest_LBA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LBARequest_LBA>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LBARequest_LBA& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LBARequest_LBA& from) {
    LBARequest_LBA::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LBARequest_LBA* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.LBARequest.LBA";
  }
  protected:
  explicit LBARequest_LBA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunksFieldNumber = 3,
    kSstNameFieldNumber = 1,
    kCsdIdFieldNumber = 2,
  };
  // repeated .StorageEngineInstance.Chunk chunks = 3;
  int chunks_size() const;
  private:
  int _internal_chunks_size() const;
  public:
  void clear_chunks();
  ::StorageEngineInstance::Chunk* mutable_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk >*
      mutable_chunks();
  private:
  const ::StorageEngineInstance::Chunk& _internal_chunks(int index) const;
  ::StorageEngineInstance::Chunk* _internal_add_chunks();
  public:
  const ::StorageEngineInstance::Chunk& chunks(int index) const;
  ::StorageEngineInstance::Chunk* add_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk >&
      chunks() const;

  // string sst_name = 1;
  void clear_sst_name();
  const std::string& sst_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sst_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sst_name();
  PROTOBUF_NODISCARD std::string* release_sst_name();
  void set_allocated_sst_name(std::string* sst_name);
  private:
  const std::string& _internal_sst_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sst_name(const std::string& value);
  std::string* _internal_mutable_sst_name();
  public:

  // string csd_id = 2;
  void clear_csd_id();
  const std::string& csd_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_csd_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_csd_id();
  PROTOBUF_NODISCARD std::string* release_csd_id();
  void set_allocated_csd_id(std::string* csd_id);
  private:
  const std::string& _internal_csd_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_csd_id(const std::string& value);
  std::string* _internal_mutable_csd_id();
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.LBARequest.LBA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk > chunks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sst_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr csd_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lba2pba_2eproto;
};
// -------------------------------------------------------------------

class LBARequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.LBARequest) */ {
 public:
  inline LBARequest() : LBARequest(nullptr) {}
  ~LBARequest() override;
  explicit PROTOBUF_CONSTEXPR LBARequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LBARequest(const LBARequest& from);
  LBARequest(LBARequest&& from) noexcept
    : LBARequest() {
    *this = ::std::move(from);
  }

  inline LBARequest& operator=(const LBARequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LBARequest& operator=(LBARequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LBARequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LBARequest* internal_default_instance() {
    return reinterpret_cast<const LBARequest*>(
               &_LBARequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LBARequest& a, LBARequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LBARequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LBARequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LBARequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LBARequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LBARequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LBARequest& from) {
    LBARequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LBARequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.LBARequest";
  }
  protected:
  explicit LBARequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LBARequest_LBA LBA;

  // accessors -------------------------------------------------------

  enum : int {
    kLbaChunksFieldNumber = 1,
  };
  // repeated .StorageEngineInstance.LBARequest.LBA lba_chunks = 1;
  int lba_chunks_size() const;
  private:
  int _internal_lba_chunks_size() const;
  public:
  void clear_lba_chunks();
  ::StorageEngineInstance::LBARequest_LBA* mutable_lba_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::LBARequest_LBA >*
      mutable_lba_chunks();
  private:
  const ::StorageEngineInstance::LBARequest_LBA& _internal_lba_chunks(int index) const;
  ::StorageEngineInstance::LBARequest_LBA* _internal_add_lba_chunks();
  public:
  const ::StorageEngineInstance::LBARequest_LBA& lba_chunks(int index) const;
  ::StorageEngineInstance::LBARequest_LBA* add_lba_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::LBARequest_LBA >&
      lba_chunks() const;

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.LBARequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::LBARequest_LBA > lba_chunks_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lba2pba_2eproto;
};
// -------------------------------------------------------------------

class Chunk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.Chunk) */ {
 public:
  inline Chunk() : Chunk(nullptr) {}
  ~Chunk() override;
  explicit PROTOBUF_CONSTEXPR Chunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chunk(const Chunk& from);
  Chunk(Chunk&& from) noexcept
    : Chunk() {
    *this = ::std::move(from);
  }

  inline Chunk& operator=(const Chunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chunk& operator=(Chunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chunk* internal_default_instance() {
    return reinterpret_cast<const Chunk*>(
               &_Chunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Chunk& a, Chunk& b) {
    a.Swap(&b);
  }
  inline void Swap(Chunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Chunk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Chunk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Chunk& from) {
    Chunk::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chunk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.Chunk";
  }
  protected:
  explicit Chunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // int64 offset = 1;
  void clear_offset();
  int64_t offset() const;
  void set_offset(int64_t value);
  private:
  int64_t _internal_offset() const;
  void _internal_set_offset(int64_t value);
  public:

  // int32 length = 2;
  void clear_length();
  int32_t length() const;
  void set_length(int32_t value);
  private:
  int32_t _internal_length() const;
  void _internal_set_length(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.Chunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t offset_;
    int32_t length_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lba2pba_2eproto;
};
// -------------------------------------------------------------------

class PBAResponse_PBA final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.PBAResponse.PBA) */ {
 public:
  inline PBAResponse_PBA() : PBAResponse_PBA(nullptr) {}
  ~PBAResponse_PBA() override;
  explicit PROTOBUF_CONSTEXPR PBAResponse_PBA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBAResponse_PBA(const PBAResponse_PBA& from);
  PBAResponse_PBA(PBAResponse_PBA&& from) noexcept
    : PBAResponse_PBA() {
    *this = ::std::move(from);
  }

  inline PBAResponse_PBA& operator=(const PBAResponse_PBA& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBAResponse_PBA& operator=(PBAResponse_PBA&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBAResponse_PBA& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBAResponse_PBA* internal_default_instance() {
    return reinterpret_cast<const PBAResponse_PBA*>(
               &_PBAResponse_PBA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PBAResponse_PBA& a, PBAResponse_PBA& b) {
    a.Swap(&b);
  }
  inline void Swap(PBAResponse_PBA* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBAResponse_PBA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBAResponse_PBA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBAResponse_PBA>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBAResponse_PBA& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBAResponse_PBA& from) {
    PBAResponse_PBA::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBAResponse_PBA* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.PBAResponse.PBA";
  }
  protected:
  explicit PBAResponse_PBA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunksFieldNumber = 1,
  };
  // repeated .StorageEngineInstance.Chunk chunks = 1;
  int chunks_size() const;
  private:
  int _internal_chunks_size() const;
  public:
  void clear_chunks();
  ::StorageEngineInstance::Chunk* mutable_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk >*
      mutable_chunks();
  private:
  const ::StorageEngineInstance::Chunk& _internal_chunks(int index) const;
  ::StorageEngineInstance::Chunk* _internal_add_chunks();
  public:
  const ::StorageEngineInstance::Chunk& chunks(int index) const;
  ::StorageEngineInstance::Chunk* add_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk >&
      chunks() const;

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.PBAResponse.PBA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk > chunks_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lba2pba_2eproto;
};
// -------------------------------------------------------------------

class PBAResponse_PbaChunksEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PBAResponse_PbaChunksEntry_DoNotUse, 
    std::string, ::StorageEngineInstance::PBAResponse_PBA,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PBAResponse_PbaChunksEntry_DoNotUse, 
    std::string, ::StorageEngineInstance::PBAResponse_PBA,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  PBAResponse_PbaChunksEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR PBAResponse_PbaChunksEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit PBAResponse_PbaChunksEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PBAResponse_PbaChunksEntry_DoNotUse& other);
  static const PBAResponse_PbaChunksEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PBAResponse_PbaChunksEntry_DoNotUse*>(&_PBAResponse_PbaChunksEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "StorageEngineInstance.PBAResponse.PbaChunksEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_lba2pba_2eproto;
};

// -------------------------------------------------------------------

class PBAResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StorageEngineInstance.PBAResponse) */ {
 public:
  inline PBAResponse() : PBAResponse(nullptr) {}
  ~PBAResponse() override;
  explicit PROTOBUF_CONSTEXPR PBAResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PBAResponse(const PBAResponse& from);
  PBAResponse(PBAResponse&& from) noexcept
    : PBAResponse() {
    *this = ::std::move(from);
  }

  inline PBAResponse& operator=(const PBAResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBAResponse& operator=(PBAResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PBAResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PBAResponse* internal_default_instance() {
    return reinterpret_cast<const PBAResponse*>(
               &_PBAResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PBAResponse& a, PBAResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PBAResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PBAResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PBAResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PBAResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PBAResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PBAResponse& from) {
    PBAResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBAResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StorageEngineInstance.PBAResponse";
  }
  protected:
  explicit PBAResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PBAResponse_PBA PBA;

  // accessors -------------------------------------------------------

  enum : int {
    kPbaChunksFieldNumber = 1,
  };
  // map<string, .StorageEngineInstance.PBAResponse.PBA> pba_chunks = 1;
  int pba_chunks_size() const;
  private:
  int _internal_pba_chunks_size() const;
  public:
  void clear_pba_chunks();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::PBAResponse_PBA >&
      _internal_pba_chunks() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::PBAResponse_PBA >*
      _internal_mutable_pba_chunks();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::PBAResponse_PBA >&
      pba_chunks() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::PBAResponse_PBA >*
      mutable_pba_chunks();

  // @@protoc_insertion_point(class_scope:StorageEngineInstance.PBAResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        PBAResponse_PbaChunksEntry_DoNotUse,
        std::string, ::StorageEngineInstance::PBAResponse_PBA,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> pba_chunks_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lba2pba_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LBARequest_LBA

// string sst_name = 1;
inline void LBARequest_LBA::clear_sst_name() {
  _impl_.sst_name_.ClearToEmpty();
}
inline const std::string& LBARequest_LBA::sst_name() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.LBARequest.LBA.sst_name)
  return _internal_sst_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LBARequest_LBA::set_sst_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sst_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.LBARequest.LBA.sst_name)
}
inline std::string* LBARequest_LBA::mutable_sst_name() {
  std::string* _s = _internal_mutable_sst_name();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.LBARequest.LBA.sst_name)
  return _s;
}
inline const std::string& LBARequest_LBA::_internal_sst_name() const {
  return _impl_.sst_name_.Get();
}
inline void LBARequest_LBA::_internal_set_sst_name(const std::string& value) {
  
  _impl_.sst_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LBARequest_LBA::_internal_mutable_sst_name() {
  
  return _impl_.sst_name_.Mutable(GetArenaForAllocation());
}
inline std::string* LBARequest_LBA::release_sst_name() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.LBARequest.LBA.sst_name)
  return _impl_.sst_name_.Release();
}
inline void LBARequest_LBA::set_allocated_sst_name(std::string* sst_name) {
  if (sst_name != nullptr) {
    
  } else {
    
  }
  _impl_.sst_name_.SetAllocated(sst_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sst_name_.IsDefault()) {
    _impl_.sst_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.LBARequest.LBA.sst_name)
}

// string csd_id = 2;
inline void LBARequest_LBA::clear_csd_id() {
  _impl_.csd_id_.ClearToEmpty();
}
inline const std::string& LBARequest_LBA::csd_id() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.LBARequest.LBA.csd_id)
  return _internal_csd_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LBARequest_LBA::set_csd_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.csd_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StorageEngineInstance.LBARequest.LBA.csd_id)
}
inline std::string* LBARequest_LBA::mutable_csd_id() {
  std::string* _s = _internal_mutable_csd_id();
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.LBARequest.LBA.csd_id)
  return _s;
}
inline const std::string& LBARequest_LBA::_internal_csd_id() const {
  return _impl_.csd_id_.Get();
}
inline void LBARequest_LBA::_internal_set_csd_id(const std::string& value) {
  
  _impl_.csd_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LBARequest_LBA::_internal_mutable_csd_id() {
  
  return _impl_.csd_id_.Mutable(GetArenaForAllocation());
}
inline std::string* LBARequest_LBA::release_csd_id() {
  // @@protoc_insertion_point(field_release:StorageEngineInstance.LBARequest.LBA.csd_id)
  return _impl_.csd_id_.Release();
}
inline void LBARequest_LBA::set_allocated_csd_id(std::string* csd_id) {
  if (csd_id != nullptr) {
    
  } else {
    
  }
  _impl_.csd_id_.SetAllocated(csd_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.csd_id_.IsDefault()) {
    _impl_.csd_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StorageEngineInstance.LBARequest.LBA.csd_id)
}

// repeated .StorageEngineInstance.Chunk chunks = 3;
inline int LBARequest_LBA::_internal_chunks_size() const {
  return _impl_.chunks_.size();
}
inline int LBARequest_LBA::chunks_size() const {
  return _internal_chunks_size();
}
inline void LBARequest_LBA::clear_chunks() {
  _impl_.chunks_.Clear();
}
inline ::StorageEngineInstance::Chunk* LBARequest_LBA::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.LBARequest.LBA.chunks)
  return _impl_.chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk >*
LBARequest_LBA::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.LBARequest.LBA.chunks)
  return &_impl_.chunks_;
}
inline const ::StorageEngineInstance::Chunk& LBARequest_LBA::_internal_chunks(int index) const {
  return _impl_.chunks_.Get(index);
}
inline const ::StorageEngineInstance::Chunk& LBARequest_LBA::chunks(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.LBARequest.LBA.chunks)
  return _internal_chunks(index);
}
inline ::StorageEngineInstance::Chunk* LBARequest_LBA::_internal_add_chunks() {
  return _impl_.chunks_.Add();
}
inline ::StorageEngineInstance::Chunk* LBARequest_LBA::add_chunks() {
  ::StorageEngineInstance::Chunk* _add = _internal_add_chunks();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.LBARequest.LBA.chunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk >&
LBARequest_LBA::chunks() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.LBARequest.LBA.chunks)
  return _impl_.chunks_;
}

// -------------------------------------------------------------------

// LBARequest

// repeated .StorageEngineInstance.LBARequest.LBA lba_chunks = 1;
inline int LBARequest::_internal_lba_chunks_size() const {
  return _impl_.lba_chunks_.size();
}
inline int LBARequest::lba_chunks_size() const {
  return _internal_lba_chunks_size();
}
inline void LBARequest::clear_lba_chunks() {
  _impl_.lba_chunks_.Clear();
}
inline ::StorageEngineInstance::LBARequest_LBA* LBARequest::mutable_lba_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.LBARequest.lba_chunks)
  return _impl_.lba_chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::LBARequest_LBA >*
LBARequest::mutable_lba_chunks() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.LBARequest.lba_chunks)
  return &_impl_.lba_chunks_;
}
inline const ::StorageEngineInstance::LBARequest_LBA& LBARequest::_internal_lba_chunks(int index) const {
  return _impl_.lba_chunks_.Get(index);
}
inline const ::StorageEngineInstance::LBARequest_LBA& LBARequest::lba_chunks(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.LBARequest.lba_chunks)
  return _internal_lba_chunks(index);
}
inline ::StorageEngineInstance::LBARequest_LBA* LBARequest::_internal_add_lba_chunks() {
  return _impl_.lba_chunks_.Add();
}
inline ::StorageEngineInstance::LBARequest_LBA* LBARequest::add_lba_chunks() {
  ::StorageEngineInstance::LBARequest_LBA* _add = _internal_add_lba_chunks();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.LBARequest.lba_chunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::LBARequest_LBA >&
LBARequest::lba_chunks() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.LBARequest.lba_chunks)
  return _impl_.lba_chunks_;
}

// -------------------------------------------------------------------

// Chunk

// int64 offset = 1;
inline void Chunk::clear_offset() {
  _impl_.offset_ = int64_t{0};
}
inline int64_t Chunk::_internal_offset() const {
  return _impl_.offset_;
}
inline int64_t Chunk::offset() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Chunk.offset)
  return _internal_offset();
}
inline void Chunk::_internal_set_offset(int64_t value) {
  
  _impl_.offset_ = value;
}
inline void Chunk::set_offset(int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Chunk.offset)
}

// int32 length = 2;
inline void Chunk::clear_length() {
  _impl_.length_ = 0;
}
inline int32_t Chunk::_internal_length() const {
  return _impl_.length_;
}
inline int32_t Chunk::length() const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.Chunk.length)
  return _internal_length();
}
inline void Chunk::_internal_set_length(int32_t value) {
  
  _impl_.length_ = value;
}
inline void Chunk::set_length(int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:StorageEngineInstance.Chunk.length)
}

// -------------------------------------------------------------------

// PBAResponse_PBA

// repeated .StorageEngineInstance.Chunk chunks = 1;
inline int PBAResponse_PBA::_internal_chunks_size() const {
  return _impl_.chunks_.size();
}
inline int PBAResponse_PBA::chunks_size() const {
  return _internal_chunks_size();
}
inline void PBAResponse_PBA::clear_chunks() {
  _impl_.chunks_.Clear();
}
inline ::StorageEngineInstance::Chunk* PBAResponse_PBA::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:StorageEngineInstance.PBAResponse.PBA.chunks)
  return _impl_.chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk >*
PBAResponse_PBA::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:StorageEngineInstance.PBAResponse.PBA.chunks)
  return &_impl_.chunks_;
}
inline const ::StorageEngineInstance::Chunk& PBAResponse_PBA::_internal_chunks(int index) const {
  return _impl_.chunks_.Get(index);
}
inline const ::StorageEngineInstance::Chunk& PBAResponse_PBA::chunks(int index) const {
  // @@protoc_insertion_point(field_get:StorageEngineInstance.PBAResponse.PBA.chunks)
  return _internal_chunks(index);
}
inline ::StorageEngineInstance::Chunk* PBAResponse_PBA::_internal_add_chunks() {
  return _impl_.chunks_.Add();
}
inline ::StorageEngineInstance::Chunk* PBAResponse_PBA::add_chunks() {
  ::StorageEngineInstance::Chunk* _add = _internal_add_chunks();
  // @@protoc_insertion_point(field_add:StorageEngineInstance.PBAResponse.PBA.chunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::StorageEngineInstance::Chunk >&
PBAResponse_PBA::chunks() const {
  // @@protoc_insertion_point(field_list:StorageEngineInstance.PBAResponse.PBA.chunks)
  return _impl_.chunks_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PBAResponse

// map<string, .StorageEngineInstance.PBAResponse.PBA> pba_chunks = 1;
inline int PBAResponse::_internal_pba_chunks_size() const {
  return _impl_.pba_chunks_.size();
}
inline int PBAResponse::pba_chunks_size() const {
  return _internal_pba_chunks_size();
}
inline void PBAResponse::clear_pba_chunks() {
  _impl_.pba_chunks_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::PBAResponse_PBA >&
PBAResponse::_internal_pba_chunks() const {
  return _impl_.pba_chunks_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::PBAResponse_PBA >&
PBAResponse::pba_chunks() const {
  // @@protoc_insertion_point(field_map:StorageEngineInstance.PBAResponse.pba_chunks)
  return _internal_pba_chunks();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::PBAResponse_PBA >*
PBAResponse::_internal_mutable_pba_chunks() {
  return _impl_.pba_chunks_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::StorageEngineInstance::PBAResponse_PBA >*
PBAResponse::mutable_pba_chunks() {
  // @@protoc_insertion_point(field_mutable_map:StorageEngineInstance.PBAResponse.pba_chunks)
  return _internal_mutable_pba_chunks();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace StorageEngineInstance

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lba2pba_2eproto
